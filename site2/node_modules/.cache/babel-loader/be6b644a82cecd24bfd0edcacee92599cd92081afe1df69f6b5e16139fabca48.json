{"ast":null,"code":"var _jsxFileName = \"D:\\\\skella\\\\site2\\\\src\\\\components\\\\phantom.jsx\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Connection, Transaction, SystemProgram, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport './phantom.css';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Phantom() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [wallet, setWallet] = useState('B1MEySUG5zs3zMC5BEfi8w5p7r6tVDgc93xQynkTw2z3');\n  const [amount, setAmount] = useState(0);\n  const [connected, setConnected] = useState(false);\n  const [walletBalance, setWalletBalance] = useState(0);\n  const [signStatus, setSignStatus] = useState('');\n  const [count, setCount] = useState(0);\n  const Wallet = useWallet();\n  const MAX_POLLS = 60;\n  const POLLING_INTERVAL = 1000;\n  const network = clusterApiUrl('devnet');\n  const connection = new Connection(network, 'confirmed');\n\n  // useEffect(() => {\n  //   Wallet = useWallet();\n  // },[wallet])\n\n  const getProvider = async () => {\n    if ('phantom' in window) {\n      var _window$phantom;\n      const provider = await ((_window$phantom = window.phantom) === null || _window$phantom === void 0 ? void 0 : _window$phantom.solana);\n      if (provider !== null && provider !== void 0 && provider.isPhantom) {\n        return provider;\n      } else {\n        return console.log('Phantom is not available');\n      }\n    }\n  };\n  const provider = getProvider();\n  const getBalance = async () => {\n    _s();\n    const Wallet = useWallet();\n    try {\n      if (!provider) return;\n      console.log(Wallet.toString());\n      setWalletBalance(await connection.getBalance(Wallet.PublicKey));\n      console.log(`Balance: ${walletBalance}`);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  _s(getBalance, \"7WknJ4Vc7Mz5T/pVdmKwWmUtEo0=\", false, function () {\n    return [useWallet];\n  });\n  const handleSignAndSendTransaction = async () => {\n    if (!provider) return;\n    await getBalance();\n    if (walletBalance < amount) return console.log('Insufficient funds');\n    try {\n      const transaction = await createTransferTransaction(provider.publicKey, connection);\n      const signature = await provider.signAndSendTransaction(transaction);\n      pollSignatureStatus(signature, connection);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const createTransferTransaction = async (publicKey, connection) => {\n    const transaction = new Transaction().add(SystemProgram.transfer({\n      fromPubkeys: publicKey,\n      toPubkeys: publicKey,\n      lamports: amount * Math.pow(10, 9)\n    }));\n    return transaction;\n  };\n  const pollSignatureStatus = async (signature, connection) => {\n    const interval = setInterval(async () => {\n      if (count === MAX_POLLS) {\n        clearInterval(interval);\n        setSignStatus('failed');\n        return;\n      }\n      const {\n        value\n      } = await connection.getSignatureStatus(signature);\n      const confirmationStatus = value === null || value === void 0 ? void 0 : value.confirmationStatus;\n      if (confirmationStatus) {\n        const hasReachedSufficientCommitment = confirmationStatus === 'confirmed' || confirmationStatus === 'finalized';\n        if (hasReachedSufficientCommitment) {\n          clearInterval(interval);\n          setSignStatus('success');\n          return;\n        }\n      } else {\n        setSignStatus('waiting');\n        console.log('Waiting on confirmation...');\n      }\n      setCount(count + 1);\n    }, POLLING_INTERVAL);\n  };\n  const connectWallet = async () => {\n    try {\n      var _window$phantom2;\n      if ((_window$phantom2 = window.phantom) !== null && _window$phantom2 !== void 0 && _window$phantom2.solana.isPhantom) {\n        var _window$phantom3;\n        const resp = await ((_window$phantom3 = window.phantom) === null || _window$phantom3 === void 0 ? void 0 : _window$phantom3.solana.connect());\n        setConnected(true);\n        return resp.publicKey.toString();\n      }\n    } catch (err) {\n      console.log(err);\n      console.log('error at connect wallet');\n    }\n  };\n  const disconectWallet = async () => {\n    try {\n      await window.solana.disconnect();\n      setConnected(false);\n    } catch (err) {\n      console.error(err);\n      console.log('Error at wallet disconnect');\n    }\n    console.log(connected);\n  };\n  const handleSend = async () => {\n    await handleSignAndSendTransaction();\n  };\n  const handleConnectButton = async () => {\n    if (connected) {\n      try {\n        console.log(`handle Disconnect`);\n        disconectWallet();\n        setWallet(null);\n      } catch (e) {\n        console.log(e);\n        console.log(`error at handle Disonnect`);\n      }\n      console.log(connected);\n    } else {\n      try {\n        console.log(`handle Connect`);\n        setWallet(await connectWallet());\n      } catch (e) {\n        console.log(e);\n        console.log(`error at handle Connect`);\n      }\n      console.log(`Connected with Public Key: ${wallet}`);\n      console.log(wallet);\n    }\n  };\n  const returnWallet = async () => {\n    console.log(wallet);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"phantom\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Phantom wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: handleConnectButton,\n        children: connected ? \"Disconnect\" : \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"buttons\",\n        onChange: event => setAmount(event.target.value),\n        type: \"text\",\n        value: amount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: handleSend,\n        disabled: !connected,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: returnWallet,\n        children: \"Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: getBalance,\n        children: \"Balance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), !connected ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Wallet not connected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 20\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"connected to \", wallet.substring(0, 4) + \"....\" + wallet.substr(wallet.length - 4, wallet.length)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 49\n    }, this), signStatus === \"success\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Transaction Successfull\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 35\n    }, this) : null, signStatus === \"waiting\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Waiting for conformation...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 35\n    }, this) : null, signStatus === \"failed\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Transaction Failed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 34\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n}\n_s2(Phantom, \"x2tIs6NHGBsAUjdnCEonCPY3/60=\", false, function () {\n  return [useWallet];\n});\n_c = Phantom;\nexport default Phantom;\nvar _c;\n$RefreshReg$(_c, \"Phantom\");","map":{"version":3,"names":["React","useEffect","useState","Connection","Transaction","SystemProgram","PublicKey","clusterApiUrl","useWallet","jsxDEV","_jsxDEV","Phantom","_s2","_s","$RefreshSig$","wallet","setWallet","amount","setAmount","connected","setConnected","walletBalance","setWalletBalance","signStatus","setSignStatus","count","setCount","Wallet","MAX_POLLS","POLLING_INTERVAL","network","connection","getProvider","window","_window$phantom","provider","phantom","solana","isPhantom","console","log","getBalance","toString","err","error","handleSignAndSendTransaction","transaction","createTransferTransaction","publicKey","signature","signAndSendTransaction","pollSignatureStatus","add","transfer","fromPubkeys","toPubkeys","lamports","Math","pow","interval","setInterval","clearInterval","value","getSignatureStatus","confirmationStatus","hasReachedSufficientCommitment","connectWallet","_window$phantom2","_window$phantom3","resp","connect","disconectWallet","disconnect","handleSend","handleConnectButton","e","returnWallet","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","event","target","type","disabled","substring","substr","length","_c","$RefreshReg$"],"sources":["D:/skella/site2/src/components/phantom.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Connection, Transaction, SystemProgram,PublicKey, clusterApiUrl } from \"@solana/web3.js\";\r\nimport './phantom.css';\r\nimport { useWallet } from '@solana/wallet-adapter-react'\r\n\r\nexport function Phantom() {\r\n\r\n  const [wallet, setWallet] = useState('B1MEySUG5zs3zMC5BEfi8w5p7r6tVDgc93xQynkTw2z3');\r\n  const [amount, setAmount] = useState(0);\r\n  const [connected, setConnected] = useState(false);\r\n  const [walletBalance, setWalletBalance] = useState(0);\r\n  const [signStatus, setSignStatus] = useState('');\r\n  const [count, setCount] = useState(0);\r\n\r\n  const Wallet = useWallet();\r\n\r\n  const MAX_POLLS = 60;\r\n  const POLLING_INTERVAL = 1000;\r\n\r\n  const network = clusterApiUrl('devnet');\r\n  const connection = new Connection(network, 'confirmed');\r\n\r\n  // useEffect(() => {\r\n  //   Wallet = useWallet();\r\n  // },[wallet])\r\n\r\n\r\n  const getProvider = async() => {\r\n    \r\n    if ('phantom' in window) {\r\n      const provider =  await window.phantom?.solana;\r\n  \r\n      if (provider?.isPhantom) {\r\n        return provider;\r\n      }\r\n      else {\r\n        return console.log('Phantom is not available');\r\n      }\r\n    }\r\n  };\r\n\r\n  const provider = getProvider();\r\n\r\n  const getBalance = async () => {\r\n    const Wallet = useWallet();\r\n    try {\r\n      if(!provider) return;\r\n      console.log(Wallet.toString());\r\n      setWalletBalance(await connection.getBalance(Wallet.PublicKey));\r\n      console.log(`Balance: ${walletBalance}`);\r\n    }\r\n    catch(err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  const handleSignAndSendTransaction = async () => {\r\n    if (!provider) return;\r\n    await getBalance();\r\n    if(walletBalance < amount) return console.log('Insufficient funds');\r\n    try{\r\n      const transaction = await createTransferTransaction(provider.publicKey, connection);\r\n      const signature = await provider.signAndSendTransaction(transaction);\r\n      pollSignatureStatus(signature, connection);\r\n    }\r\n    catch(err){\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const createTransferTransaction = async (publicKey, connection) => {\r\n    const transaction = new Transaction().add(\r\n      SystemProgram.transfer({\r\n        fromPubkeys : publicKey,\r\n        toPubkeys : publicKey,\r\n        lamports: amount * Math.pow(10, 9),\r\n      })\r\n    )\r\n    return transaction\r\n  }\r\n\r\n  const pollSignatureStatus = async(signature, connection) => {\r\n\r\n    const interval = setInterval(async () => {\r\n      if (count === MAX_POLLS) {\r\n        clearInterval(interval);\r\n        setSignStatus('failed');\r\n        return;\r\n      }\r\n      \r\n      const { value } = await connection.getSignatureStatus(signature);\r\n    const confirmationStatus = value?.confirmationStatus;\r\n\r\n    if (confirmationStatus) {\r\n      const hasReachedSufficientCommitment = confirmationStatus === 'confirmed' || confirmationStatus === 'finalized';\r\n\r\n      if (hasReachedSufficientCommitment) {\r\n        clearInterval(interval);\r\n        setSignStatus('success')\r\n        return;\r\n      }\r\n    } else {\r\n      setSignStatus('waiting');\r\n      console.log('Waiting on confirmation...');\r\n    }\r\n\r\n    setCount(count+1);\r\n\r\n    },POLLING_INTERVAL);\r\n  }\r\n\r\n  const connectWallet = async() => {    \r\n    try {\r\n      if(window.phantom?.solana.isPhantom){\r\n        const resp = await window.phantom?.solana.connect();\r\n        setConnected(true)\r\n        return resp.publicKey.toString();\r\n      }\r\n    } \r\n    catch (err) {\r\n      console.log(err);\r\n      console.log('error at connect wallet');\r\n    }\r\n  };\r\n\r\n  const disconectWallet = async() => {\r\n    try{\r\n      await window.solana.disconnect();\r\n      setConnected(false);\r\n    }\r\n    catch(err) {\r\n      console.error(err);\r\n      console.log('Error at wallet disconnect');\r\n    }\r\n    console.log(connected);\r\n  }\r\n\r\n  const handleSend = async() => {\r\n    await handleSignAndSendTransaction();\r\n  }\r\n\r\n  const handleConnectButton = async() => {\r\n    if(connected) {\r\n      try{\r\n        console.log(`handle Disconnect`);\r\n        disconectWallet();\r\n        setWallet(null);\r\n      }\r\n      catch(e) {\r\n        console.log(e);\r\n        console.log(`error at handle Disonnect`);\r\n      }\r\n      console.log(connected);\r\n    }\r\n    else {\r\n      try{\r\n        console.log(`handle Connect`);\r\n        setWallet(await connectWallet())\r\n      }\r\n      catch(e) {\r\n        console.log(e);\r\n        console.log(`error at handle Connect`);\r\n      }\r\n      console.log(`Connected with Public Key: ${wallet}`)\r\n      console.log(wallet);\r\n    }\r\n  }\r\n\r\n  const returnWallet = async() => {\r\n    console.log(wallet);\r\n  }\r\n\r\n  return (\r\n    <div className=\"phantom\">\r\n\r\n      <h3>Phantom wallet</h3>\r\n\r\n      <div>\r\n        <button className=\"buttons\" onClick={handleConnectButton}>{connected ? \"Disconnect\" : \"Connect\"}</button>   \r\n        <input className=\"buttons\" onChange={(event) => setAmount(event.target.value)} type=\"text\" value={amount} />\r\n        <button className=\"buttons\" onClick={handleSend} disabled={!connected} >Send</button>   \r\n        <button className=\"buttons\" onClick={returnWallet} >Wallet</button>   \r\n        <button className=\"buttons\" onClick={getBalance} >Balance</button>   \r\n      </div>\r\n\r\n      {!connected? <p>Wallet not connected</p> :<p>connected to {wallet.substring(0, 4) + \"....\" + wallet.substr(wallet.length-4, wallet.length)}</p>}\r\n      {signStatus === \"success\" ? <p>Transaction Successfull</p> : null }\r\n      {signStatus === \"waiting\" ? <p>Waiting for conformation...</p> : null }\r\n      {signStatus === \"failed\" ? <p>Transaction Failed</p> : null }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Phantom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\skella\\\\site2\\\\src\\\\components\\\\phantom.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Connection, PublicKey, Transaction, SystemProgram, LAMPORTS_PER_SOL, clusterApiUrl } from \"@solana/web3.js\";\nimport './phantom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Phantom() {\n  _s();\n  const [wallet, setWallet] = useState(null);\n  const [amount, setAmount] = useState(0);\n  const [status, setStatus] = useState('notConnected');\n  const [connected, setConnected] = useState(false);\n  const network = clusterApiUrl('devnet');\n  const connection = new Connection(network, 'confirmed');\n  const provider = getProvider();\n  const message = 'Please sign and validate your assets';\n  const getProvider = () => {\n    if ('phantom' in window) {\n      var _window$phantom;\n      const provider = (_window$phantom = window.phantom) === null || _window$phantom === void 0 ? void 0 : _window$phantom.solana;\n      if (provider !== null && provider !== void 0 && provider.isPhantom) {\n        return provider;\n      }\n    }\n    console.log('Phantom not found');\n  };\n  const handleSignAndSendTransaction = async () => {\n    if (!provider) return;\n    try {\n      const transaction = await createTransferTransaction(provider.publicKey, connection);\n      const signature = await signAndSendTransaction(provider, transaction);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const createTransferTransaction = async (publicKey, connection) => {\n    const transaction = new Transaction().add(SystemProgram.transfer({\n      fromPubkeys: publicKey,\n      toPubkeys: publicKey,\n      lamports: amount\n    }));\n  };\n  const connectWallet = async () => {\n    try {\n      const resp = await provider.connect();\n      setStatus('connected');\n      return resp.publicKey.toString();\n    } catch (err) {\n      console.log('User rejected the request.');\n    }\n  };\n  const handleConnect = async () => {\n    const wallet = await connectWallet();\n    setWallet(wallet);\n    setConnected(true);\n    console.log(`Connected with Public Key: ${wallet}`);\n  };\n  const handleDisconnect = async () => {\n    await provider.disconnect();\n    setWallet(null);\n    setConnected(false);\n    console.log(`Disonnected wallet`);\n  };\n  const handleSend = async () => {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"phantom\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Phantom wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: connected ? handleDisconnect : handleConnect,\n        children: connected ? \"Disconnect\" : \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"buttons\",\n        onChange: event => setAmount(event.target.value),\n        type: \"text\",\n        value: amount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), wallet === null ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Wallet not connected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"connected to \", wallet.substring(0, 4) + \"....\" + wallet.substr(wallet.length - 4, wallet.length)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 53\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(Phantom, \"FrKiiPc0u8VZaht5Rw2LwUn/7w0=\");\n_c = Phantom;\nexport default Phantom;\nvar _c;\n$RefreshReg$(_c, \"Phantom\");","map":{"version":3,"names":["React","useState","useEffect","Connection","PublicKey","Transaction","SystemProgram","LAMPORTS_PER_SOL","clusterApiUrl","jsxDEV","_jsxDEV","Phantom","_s","wallet","setWallet","amount","setAmount","status","setStatus","connected","setConnected","network","connection","provider","getProvider","message","window","_window$phantom","phantom","solana","isPhantom","console","log","handleSignAndSendTransaction","transaction","createTransferTransaction","publicKey","signature","signAndSendTransaction","err","add","transfer","fromPubkeys","toPubkeys","lamports","connectWallet","resp","connect","toString","handleConnect","handleDisconnect","disconnect","handleSend","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","event","target","value","type","substring","substr","length","_c","$RefreshReg$"],"sources":["D:/skella/site2/src/components/phantom.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Connection, PublicKey, Transaction, SystemProgram, LAMPORTS_PER_SOL, clusterApiUrl } from \"@solana/web3.js\";\r\nimport './phantom.css';\r\n\r\nexport function Phantom() {\r\n\r\n  const [wallet, setWallet] = useState(null);\r\n  const [amount, setAmount] = useState(0);\r\n  const [status, setStatus] = useState('notConnected');\r\n  const [connected, setConnected] = useState(false);\r\n\r\n  const network = clusterApiUrl('devnet');\r\n  const connection = new Connection(network, 'confirmed');\r\n  const provider = getProvider();\r\n  const message = 'Please sign and validate your assets';\r\n\r\n\r\n  const getProvider = () => {\r\n    if ('phantom' in window) {\r\n      const provider = window.phantom?.solana;\r\n  \r\n      if (provider?.isPhantom) {\r\n        return provider;\r\n      }\r\n    }\r\n    console.log('Phantom not found');\r\n  };\r\n\r\n  const handleSignAndSendTransaction = async () => {\r\n    if (!provider) return;\r\n    try{\r\n      const transaction = await createTransferTransaction(provider.publicKey, connection);\r\n      const signature = await signAndSendTransaction(provider, transaction);\r\n    }\r\n    catch(err){\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const createTransferTransaction = async (publicKey, connection) => {\r\n    const transaction = new Transaction().add(\r\n      SystemProgram.transfer({\r\n        fromPubkeys : publicKey,\r\n        toPubkeys : publicKey,\r\n        lamports: amount,\r\n      })\r\n    )\r\n  }\r\n\r\n  const connectWallet = async() => {\r\n    try {\r\n      const resp = await provider.connect();\r\n      setStatus('connected');\r\n      return resp.publicKey.toString();\r\n    } \r\n    catch (err) {\r\n      console.log('User rejected the request.');\r\n    }\r\n  };\r\n\r\n  const handleConnect = async() => {\r\n    const wallet = await connectWallet();\r\n    setWallet(wallet);\r\n    setConnected(true);\r\n    console.log(`Connected with Public Key: ${wallet}`);\r\n  }\r\n\r\n  const handleDisconnect = async() => {\r\n    await provider.disconnect();\r\n    setWallet(null);\r\n    setConnected(false);\r\n    console.log(`Disonnected wallet`);\r\n  }\r\n\r\n  const handleSend = async() => {\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"phantom\">\r\n\r\n      <h3>Phantom wallet</h3>\r\n\r\n      <div>\r\n        <button className=\"buttons\" onClick={connected? handleDisconnect : handleConnect}>{connected ? \"Disconnect\" : \"Connect\"}</button>   \r\n        <input className=\"buttons\" onChange={(event) => setAmount(event.target.value)} type=\"text\" value={amount} />\r\n        <button className=\"buttons\" onClick={handleSend}>Send</button>   \r\n      </div>\r\n\r\n      {wallet=== null? <p>Wallet not connected</p> :<p>connected to {wallet.substring(0, 4) + \"....\" + wallet.substr(wallet.length-4, wallet.length)}</p>}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Phantom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\skella\\\\site2\\\\src\\\\components\\\\phantom.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Connection, Transaction, SystemProgram, PublicKey, clusterApiUrl, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport './phantom.css';\nimport * as buffer from \"buffer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Phantom() {\n  _s();\n  const [wallet, setWallet] = useState(null);\n  const [amount, setAmount] = useState(0);\n  const [status, setStatus] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [key, setKey] = useState(null);\n  const network = clusterApiUrl('devnet');\n  const connection = new Connection(network, 'confirmed');\n  window.Buffer = buffer.Buffer;\n  const destPubkeyStr = 'B1MEySUG5zs3zMC5BEfi8w5p7r6tVDgc93xQynkTw2z3';\n\n  //-------------------------- Connect & Disconnect -----------------------------//\n\n  const connectWallet = async () => {\n    try {\n      var _window$phantom;\n      if ((_window$phantom = window.phantom) !== null && _window$phantom !== void 0 && _window$phantom.solana.isPhantom) {\n        const resp = await window.solana.connect();\n        setConnected(!connected);\n        setWallet(resp.publicKey.toString());\n        setKey(resp);\n      }\n    } catch (err) {\n      console.log(err);\n      console.log('error at connect wallet');\n    }\n  };\n  const disconectWallet = async () => {\n    try {\n      await window.solana.disconnect();\n      setConnected(!connected);\n    } catch (err) {\n      console.error(err);\n      console.log('Error at wallet disconnect');\n    }\n    console.log(connected);\n  };\n\n  //-------------------------- Transaction -----------------------------//\n\n  async function signInTransactionAndSendMoney() {\n    const lamports = amount * LAMPORTS_PER_SOL;\n    try {\n      setStatus(\"started\");\n      const destPubkey = new PublicKey(destPubkeyStr);\n      const walletAccountInfo = await connection.getAccountInfo(key.publicKey);\n      console.log(\"wallet data size\", walletAccountInfo === null || walletAccountInfo === void 0 ? void 0 : walletAccountInfo.data.length);\n      const receiverAccountInfo = await connection.getAccountInfo(destPubkey);\n      console.log(\"receiver data size\", receiverAccountInfo === null || receiverAccountInfo === void 0 ? void 0 : receiverAccountInfo.data.length);\n      const instruction = SystemProgram.transfer({\n        fromPubkey: key.publicKey,\n        toPubkey: destPubkey,\n        lamports\n      });\n      let trans = await setWalletTransaction(instruction, connection);\n      let signature = await signAndSendTransaction(key, trans, connection);\n      setStatus(\"waiting\");\n      let result = await connection.confirmTransaction(signature, \"singleGossip\");\n      setStatus(\"success\");\n      console.log(\"money sent\", result);\n    } catch (e) {\n      setStatus(\"failed\");\n      console.error(\"Transaction Failed\", e);\n    }\n  }\n  async function setWalletTransaction(instruction, connection) {\n    const transaction = new Transaction();\n    transaction.add(instruction);\n    transaction.feePayer = key.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    return transaction;\n  }\n  async function signAndSendTransaction(key, transaction, connection) {\n    const {\n      signature\n    } = await window.solana.signAndSendTransaction(transaction);\n    await connection.confirmTransaction(signature);\n    console.log(\"sign transaction\");\n    console.log(\"send raw transaction\");\n    return signature;\n  }\n\n  //------------------------- Connect Button ------------------------------//\n\n  const handleConnectButton = async () => {\n    if (connected) {\n      try {\n        console.log(`handle Disconnect`);\n        disconectWallet();\n        setWallet(null);\n      } catch (e) {\n        console.log(e);\n        console.log(`error at handle Disonnect`);\n      }\n      console.log(connected);\n    } else {\n      try {\n        console.log(`handle Connect`);\n        await connectWallet();\n      } catch (e) {\n        console.log(e);\n        console.log(`error at handle Connect`);\n      }\n      console.log(`Connected with Public Key: ${wallet}`);\n      console.log(wallet);\n    }\n  };\n\n  //-------------------------- Wallet Button -----------------------------//\n\n  const returnWallet = async () => {\n    console.log(`wallet: ${wallet}`);\n    console.log(`key: ${key}`);\n  };\n\n  //-------------------------- HTML -----------------------------//\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"phantom\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Phantom wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: handleConnectButton,\n        children: connected ? \"Disconnect\" : \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"buttons\",\n        onChange: event => setAmount(event.target.value),\n        type: \"text\",\n        value: amount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: signInTransactionAndSendMoney,\n        disabled: !connected || amount === 0,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: returnWallet,\n        disabled: !connected,\n        children: \"Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), wallet === null ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Wallet not connected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 26\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"connected to \", wallet.substring(0, 4) + \"....\" + wallet.substr(wallet.length - 4, wallet.length)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 56\n    }, this), (status === \"started\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Transaction Started\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 32\n    }, this) : null) || (status === \"success\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Transaction Successfull\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 94\n    }, this) : null) || (status === \"waiting\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Waiting for conformation...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 160\n    }, this) : null) || (status === \"failed\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Transaction Failed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 229\n    }, this) : null)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n}\n_s(Phantom, \"SK/KMVYCQg3zBBkFYCJFP2oWfoY=\");\n_c = Phantom;\nexport default Phantom;\nvar _c;\n$RefreshReg$(_c, \"Phantom\");","map":{"version":3,"names":["React","useState","Connection","Transaction","SystemProgram","PublicKey","clusterApiUrl","LAMPORTS_PER_SOL","buffer","jsxDEV","_jsxDEV","Phantom","_s","wallet","setWallet","amount","setAmount","status","setStatus","connected","setConnected","key","setKey","network","connection","window","Buffer","destPubkeyStr","connectWallet","_window$phantom","phantom","solana","isPhantom","resp","connect","publicKey","toString","err","console","log","disconectWallet","disconnect","error","signInTransactionAndSendMoney","lamports","destPubkey","walletAccountInfo","getAccountInfo","data","length","receiverAccountInfo","instruction","transfer","fromPubkey","toPubkey","trans","setWalletTransaction","signature","signAndSendTransaction","result","confirmTransaction","e","transaction","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","handleConnectButton","returnWallet","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","event","target","value","type","disabled","substring","substr","_c","$RefreshReg$"],"sources":["D:/skella/site2/src/components/phantom.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Connection, Transaction, SystemProgram, PublicKey, clusterApiUrl, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\r\nimport './phantom.css';\r\nimport * as buffer from \"buffer\";\r\n\r\nexport function Phantom() {\r\n\r\n  const [wallet, setWallet] = useState(null);\r\n  const [amount, setAmount] = useState(0);\r\n  const [status, setStatus] = useState(null);\r\n  const [connected, setConnected] = useState(false);\r\n  const [key, setKey] = useState(null);\r\n\r\n  const network = clusterApiUrl('devnet');\r\n  const connection = new Connection(network, 'confirmed');\r\n\r\n  window.Buffer = buffer.Buffer;\r\n  const destPubkeyStr = 'B1MEySUG5zs3zMC5BEfi8w5p7r6tVDgc93xQynkTw2z3'\r\n\r\n  //-------------------------- Connect & Disconnect -----------------------------//\r\n\r\n  const connectWallet = async () => {\r\n    try {\r\n      if (window.phantom?.solana.isPhantom) {\r\n        const resp = await window.solana.connect();\r\n        setConnected(!connected);\r\n        setWallet(resp.publicKey.toString());\r\n        setKey(resp)\r\n      }\r\n    }\r\n    catch (err) {\r\n      console.log(err);\r\n      console.log('error at connect wallet');\r\n    }\r\n  };\r\n\r\n  const disconectWallet = async () => {\r\n    try {\r\n      await window.solana.disconnect();\r\n      setConnected(!connected);\r\n    }\r\n    catch (err) {\r\n      console.error(err);\r\n      console.log('Error at wallet disconnect');\r\n    }\r\n    console.log(connected);\r\n  }\r\n\r\n  //-------------------------- Transaction -----------------------------//\r\n\r\n  async function signInTransactionAndSendMoney() {\r\n\r\n    const lamports = amount * LAMPORTS_PER_SOL;\r\n\r\n    try {\r\n\r\n      setStatus(\"started\");\r\n      const destPubkey = new PublicKey(destPubkeyStr);\r\n\r\n      const walletAccountInfo = await connection.getAccountInfo(key.publicKey);\r\n      console.log(\"wallet data size\", walletAccountInfo?.data.length);\r\n\r\n      const receiverAccountInfo = await connection.getAccountInfo(destPubkey);\r\n      console.log(\"receiver data size\", receiverAccountInfo?.data.length);\r\n\r\n      const instruction = SystemProgram.transfer({\r\n        fromPubkey: key.publicKey,\r\n        toPubkey: destPubkey,\r\n        lamports,\r\n      });\r\n\r\n      let trans = await setWalletTransaction(instruction, connection);\r\n      let signature = await signAndSendTransaction(key, trans, connection);\r\n\r\n      setStatus(\"waiting\");\r\n\r\n      let result = await connection.confirmTransaction(signature, \"singleGossip\");\r\n      setStatus(\"success\");\r\n      console.log(\"money sent\", result);\r\n\r\n    }\r\n    catch (e) {\r\n      setStatus(\"failed\");\r\n      console.error(\"Transaction Failed\", e);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  async function setWalletTransaction(instruction, connection) {\r\n\r\n    const transaction = new Transaction();\r\n\r\n    transaction.add(instruction);\r\n    transaction.feePayer = key.publicKey;\r\n\r\n    let hash = await connection.getRecentBlockhash();\r\n    console.log(\"blockhash\", hash);\r\n\r\n    transaction.recentBlockhash = hash.blockhash;\r\n    return transaction;\r\n\r\n  }\r\n\r\n  async function signAndSendTransaction(key, transaction, connection) {\r\n\r\n    const { signature } = await window.solana.signAndSendTransaction(transaction);\r\n    await connection.confirmTransaction(signature);\r\n\r\n    console.log(\"sign transaction\");\r\n    console.log(\"send raw transaction\");\r\n    return signature;\r\n\r\n  }\r\n\r\n  //------------------------- Connect Button ------------------------------//\r\n\r\n\r\n  const handleConnectButton = async () => {\r\n    if (connected) {\r\n      try {\r\n        console.log(`handle Disconnect`);\r\n        disconectWallet();\r\n        setWallet(null);\r\n      }\r\n      catch (e) {\r\n        console.log(e);\r\n        console.log(`error at handle Disonnect`);\r\n      }\r\n      console.log(connected);\r\n    }\r\n    else {\r\n      try {\r\n        console.log(`handle Connect`);\r\n        await connectWallet()\r\n      }\r\n      catch (e) {\r\n        console.log(e);\r\n        console.log(`error at handle Connect`);\r\n      }\r\n      console.log(`Connected with Public Key: ${wallet}`)\r\n      console.log(wallet);\r\n    }\r\n  }\r\n\r\n  //-------------------------- Wallet Button -----------------------------//\r\n\r\n  const returnWallet = async () => {\r\n    console.log(`wallet: ${wallet}`);\r\n    console.log(`key: ${key}`);\r\n  }\r\n\r\n  //-------------------------- HTML -----------------------------//\r\n\r\n\r\n  return (\r\n    <div className=\"phantom\">\r\n\r\n      <h3>Phantom wallet</h3>\r\n\r\n      <div>\r\n        <button className=\"buttons\" onClick={handleConnectButton}>{connected ? \"Disconnect\" : \"Connect\"}</button>\r\n        <input className=\"buttons\" onChange={(event) => setAmount(event.target.value)} type=\"text\" value={amount} />\r\n        <button className=\"buttons\" onClick={signInTransactionAndSendMoney} disabled={!connected || amount === 0} >Send</button>\r\n        <button className=\"buttons\" onClick={returnWallet} disabled={!connected} >Wallet</button>\r\n      </div>\r\n\r\n      {wallet === null ? <p>Wallet not connected</p> : <p>connected to {wallet.substring(0, 4) + \"....\" + wallet.substr(wallet.length - 4, wallet.length)}</p>}\r\n      {(status === \"started\" ? <p>Transaction Started</p> : null) || (status === \"success\" ? <p>Transaction Successfull</p> : null) || (status === \"waiting\" ? <p>Waiting for conformation...</p> : null) || (status === \"failed\" ? <p>Transaction Failed</p> : null)\r\n      }\r\n      {/* {status === \"started\" ? <p>Transaction Started</p> : null}\r\n      {status === \"success\" ? <p>Transaction Successfull</p> : null}\r\n      {status === \"waiting\" ? <p>Waiting for conformation...</p> : null}\r\n      {status === \"failed\" ? <p>Transaction Failed</p> : null} */}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Phantom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
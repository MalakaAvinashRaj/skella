{"ast":null,"code":"var _jsxFileName = \"D:\\\\skella\\\\site2\\\\src\\\\components\\\\phantom.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport './phantom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Phantom() {\n  _s();\n  const [wallet, setWallet] = useState(null);\n  const [amount, setAmount] = useState(0);\n  const [status, setStatus] = useState('notConnected');\n  const [connected, setConnected] = useState(false);\n  const getProvider = () => {\n    if ('phantom' in window) {\n      var _window$phantom;\n      const provider = (_window$phantom = window.phantom) === null || _window$phantom === void 0 ? void 0 : _window$phantom.solana;\n      if (provider !== null && provider !== void 0 && provider.isPhantom) {\n        return provider;\n      }\n    }\n    console.log('Phantom not found');\n  };\n  const provider = getProvider();\n  const connectWallet = async () => {\n    try {\n      const resp = await provider.connect();\n      setStatus('connected');\n      return resp.publicKey.toString();\n    } catch (err) {\n      console.log('User rejected the request.');\n    }\n  };\n  const handleConnect = async () => {\n    const wallet = await connectWallet();\n    setWallet(wallet);\n    setConnected(!connected);\n  };\n  const handleSend = async () => {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"phantom\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Phantom wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleConnect,\n        children: connected ? \"Disconnect\" : \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: amount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), wallet === null ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Wallet not connected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"connected to \", wallet.substring(0, 4) + \"....\" + wallet.substr(wallet.length - 4, wallet.length)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 53\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(Phantom, \"FrKiiPc0u8VZaht5Rw2LwUn/7w0=\");\n_c = Phantom;\nexport default Phantom;\nvar _c;\n$RefreshReg$(_c, \"Phantom\");","map":{"version":3,"names":["React","useState","useEffect","Connection","PublicKey","jsxDEV","_jsxDEV","Phantom","_s","wallet","setWallet","amount","setAmount","status","setStatus","connected","setConnected","getProvider","window","_window$phantom","provider","phantom","solana","isPhantom","console","log","connectWallet","resp","connect","publicKey","toString","err","handleConnect","handleSend","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","value","substring","substr","length","_c","$RefreshReg$"],"sources":["D:/skella/site2/src/components/phantom.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Connection, PublicKey } from \"@solana/web3.js\";\r\nimport './phantom.css';\r\n\r\nexport function Phantom() {\r\n\r\n  const [wallet, setWallet] = useState(null);\r\n  const [amount, setAmount] = useState(0);\r\n  const [status, setStatus] = useState('notConnected');\r\n  const [connected, setConnected] = useState(false);\r\n\r\n  const getProvider = () => {\r\n    if ('phantom' in window) {\r\n      const provider = window.phantom?.solana;\r\n  \r\n      if (provider?.isPhantom) {\r\n        return provider;\r\n      }\r\n    }\r\n    console.log('Phantom not found');\r\n  };\r\n\r\n  const provider = getProvider();\r\n\r\n  const connectWallet = async() => {\r\n    try {\r\n      const resp = await provider.connect();\r\n      setStatus('connected');\r\n      return resp.publicKey.toString();\r\n    } \r\n    catch (err) {\r\n      console.log('User rejected the request.');\r\n    }\r\n  };\r\n\r\n  const handleConnect = async() => {\r\n    const wallet = await connectWallet();\r\n    setWallet(wallet);\r\n    setConnected(!connected);\r\n  }\r\n\r\n  const handleSend = async() => {\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"phantom\">\r\n\r\n      <h3>Phantom wallet</h3>\r\n\r\n      <div>\r\n        <button onClick={handleConnect}>{connected ? \"Disconnect\" : \"Connect\"}</button>   \r\n        <input type=\"text\" value={amount} />\r\n        <button onClick={handleSend}>Send</button>   \r\n      </div>\r\n\r\n      {wallet=== null? <p>Wallet not connected</p> :<p>connected to {wallet.substring(0, 4) + \"....\" + wallet.substr(wallet.length-4, wallet.length)}</p>}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Phantom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\skella\\\\site2\\\\src\\\\components\\\\phantom.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Connection, Transaction, SystemProgram, clusterApiUrl } from \"@solana/web3.js\";\nimport './phantom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Phantom() {\n  _s();\n  const [wallet, setWallet] = useState(null);\n  const [amount, setAmount] = useState(0);\n  const [connected, setConnected] = useState(false);\n  const [walletBalance, setWalletBalance] = useState(0);\n  const [signStatus, setSignStatus] = useState('');\n  const [count, setCount] = useState(0);\n  const MAX_POLLS = 60;\n  const POLLING_INTERVAL = 1000;\n  const network = clusterApiUrl('devnet');\n  const connection = new Connection(network, 'confirmed');\n  const getProvider = async () => {\n    if ('phantom' in window) {\n      var _window$phantom;\n      const provider = await ((_window$phantom = window.phantom) === null || _window$phantom === void 0 ? void 0 : _window$phantom.solana);\n      if (provider !== null && provider !== void 0 && provider.isPhantom) {\n        return provider;\n      } else {\n        return console.log('Phantom is not available');\n      }\n    }\n  };\n  const provider = getProvider();\n  const getBalance = async () => {\n    if (!provider) return;\n    setWalletBalance(await connection.getBalance(provider.publicKey));\n  };\n  const handleSignAndSendTransaction = async () => {\n    if (!provider) return;\n    await getBalance();\n    if (walletBalance < amount) return console.log('Insufficient funds');\n    try {\n      const transaction = await createTransferTransaction(provider.publicKey, connection);\n      const signature = await provider.signAndSendTransaction(transaction);\n      pollSignatureStatus(signature, connection);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const createTransferTransaction = async (publicKey, connection) => {\n    const transaction = new Transaction().add(SystemProgram.transfer({\n      fromPubkeys: publicKey,\n      toPubkeys: publicKey,\n      lamports: amount * Math.pow(10, 9)\n    }));\n    return transaction;\n  };\n  const pollSignatureStatus = async (signature, connection) => {\n    const interval = setInterval(async () => {\n      if (count === MAX_POLLS) {\n        clearInterval(interval);\n        setSignStatus('failed');\n        return;\n      }\n      const {\n        value\n      } = await connection.getSignatureStatus(signature);\n      const confirmationStatus = value === null || value === void 0 ? void 0 : value.confirmationStatus;\n      if (confirmationStatus) {\n        const hasReachedSufficientCommitment = confirmationStatus === 'confirmed' || confirmationStatus === 'finalized';\n        if (hasReachedSufficientCommitment) {\n          clearInterval(interval);\n          setSignStatus('success');\n          return;\n        }\n      } else {\n        setSignStatus('waiting');\n        console.log('Waiting on confirmation...');\n      }\n      setCount(count + 1);\n    }, POLLING_INTERVAL);\n  };\n  const connectWallet = async () => {\n    try {\n      var _window$phantom2;\n      if ((_window$phantom2 = window.phantom) !== null && _window$phantom2 !== void 0 && _window$phantom2.solana.isPhantom) {\n        var _window$phantom3;\n        const resp = await ((_window$phantom3 = window.phantom) === null || _window$phantom3 === void 0 ? void 0 : _window$phantom3.solana.connect());\n        setConnected(true);\n        console.log(connected);\n        return resp.publicKey.toString();\n      }\n    } catch (err) {\n      console.log(err);\n      console.log('error at connect wallet');\n    }\n  };\n  const disconectWallet = async () => {\n    try {\n      if (connected) {\n        await window.disconnect();\n        setConnected(false);\n        console.log(connected);\n      }\n    } catch (err) {\n      console.error(err);\n      console.log('Error at wallet disconnect');\n    }\n  };\n  const handleConnect = async () => {\n    try {\n      setWallet(await connectWallet());\n      console.log(`Connected with Public Key: ${wallet}`);\n    } catch (e) {\n      console.log(e);\n      console.log(`error at handle Connect`);\n    }\n  };\n  const handleDisconnect = async () => {\n    try {\n      disconectWallet();\n      setWallet(null);\n    } catch (e) {\n      console.log(e);\n      console.log(`error at handle Disonnect`);\n    }\n    disconectWallet();\n  };\n  const handleSend = async () => {\n    handleSignAndSendTransaction();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"phantom\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Phantom wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: connected ? handleDisconnect : handleConnect,\n        children: connected ? \"Disconnect\" : \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"buttons\",\n        onChange: event => setAmount(event.target.value),\n        type: \"text\",\n        value: amount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), wallet === null ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Wallet not connected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"connected to \", wallet.substring(0, 4) + \"....\" + wallet.substr(wallet.length - 4, wallet.length)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 54\n    }, this), signStatus === \"success\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Transaction Successfull\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 35\n    }, this) : null, signStatus === \"waiting\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Waiting for conformation...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 35\n    }, this) : null, signStatus === \"failed\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Transaction Failed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 34\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n}\n_s(Phantom, \"iyeN9KVZ/bkXyaNtKc+f8OZjpk8=\");\n_c = Phantom;\nexport default Phantom;\nvar _c;\n$RefreshReg$(_c, \"Phantom\");","map":{"version":3,"names":["React","useState","Connection","Transaction","SystemProgram","clusterApiUrl","jsxDEV","_jsxDEV","Phantom","_s","wallet","setWallet","amount","setAmount","connected","setConnected","walletBalance","setWalletBalance","signStatus","setSignStatus","count","setCount","MAX_POLLS","POLLING_INTERVAL","network","connection","getProvider","window","_window$phantom","provider","phantom","solana","isPhantom","console","log","getBalance","publicKey","handleSignAndSendTransaction","transaction","createTransferTransaction","signature","signAndSendTransaction","pollSignatureStatus","err","add","transfer","fromPubkeys","toPubkeys","lamports","Math","pow","interval","setInterval","clearInterval","value","getSignatureStatus","confirmationStatus","hasReachedSufficientCommitment","connectWallet","_window$phantom2","_window$phantom3","resp","connect","toString","disconectWallet","disconnect","error","handleConnect","e","handleDisconnect","handleSend","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","event","target","type","substring","substr","length","_c","$RefreshReg$"],"sources":["D:/skella/site2/src/components/phantom.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Connection, Transaction, SystemProgram, clusterApiUrl } from \"@solana/web3.js\";\r\nimport './phantom.css';\r\n\r\nexport function Phantom() {\r\n\r\n  const [wallet, setWallet] = useState(null);\r\n  const [amount, setAmount] = useState(0);\r\n  const [connected, setConnected] = useState(false);\r\n  const [walletBalance, setWalletBalance] = useState(0);\r\n  const [signStatus, setSignStatus] = useState('');\r\n  const [count, setCount] = useState(0);\r\n\r\n  const MAX_POLLS = 60;\r\n  const POLLING_INTERVAL = 1000;\r\n\r\n  const network = clusterApiUrl('devnet');\r\n  const connection = new Connection(network, 'confirmed');\r\n\r\n\r\n  const getProvider = async() => {\r\n    \r\n    if ('phantom' in window) {\r\n      const provider =  await window.phantom?.solana;\r\n  \r\n      if (provider?.isPhantom) {\r\n        return provider;\r\n      }\r\n      else {\r\n        return console.log('Phantom is not available');\r\n      }\r\n    }\r\n  };\r\n\r\n  const provider = getProvider();\r\n\r\n  const getBalance = async () => {\r\n    if(!provider) return;\r\n    setWalletBalance(await connection.getBalance(provider.publicKey));\r\n  }\r\n\r\n  const handleSignAndSendTransaction = async () => {\r\n    if (!provider) return;\r\n    await getBalance();\r\n    if(walletBalance < amount) return console.log('Insufficient funds');\r\n    try{\r\n      const transaction = await createTransferTransaction(provider.publicKey, connection);\r\n      const signature = await provider.signAndSendTransaction(transaction);\r\n      pollSignatureStatus(signature, connection);\r\n    }\r\n    catch(err){\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const createTransferTransaction = async (publicKey, connection) => {\r\n    const transaction = new Transaction().add(\r\n      SystemProgram.transfer({\r\n        fromPubkeys : publicKey,\r\n        toPubkeys : publicKey,\r\n        lamports: amount * Math.pow(10, 9),\r\n      })\r\n    )\r\n    return transaction\r\n  }\r\n\r\n  const pollSignatureStatus = async(signature, connection) => {\r\n\r\n    const interval = setInterval(async () => {\r\n      if (count === MAX_POLLS) {\r\n        clearInterval(interval);\r\n        setSignStatus('failed');\r\n        return;\r\n      }\r\n      \r\n      const { value } = await connection.getSignatureStatus(signature);\r\n    const confirmationStatus = value?.confirmationStatus;\r\n\r\n    if (confirmationStatus) {\r\n      const hasReachedSufficientCommitment = confirmationStatus === 'confirmed' || confirmationStatus === 'finalized';\r\n\r\n      if (hasReachedSufficientCommitment) {\r\n        clearInterval(interval);\r\n        setSignStatus('success')\r\n        return;\r\n      }\r\n    } else {\r\n      setSignStatus('waiting');\r\n      console.log('Waiting on confirmation...');\r\n    }\r\n\r\n    setCount(count+1);\r\n\r\n    },POLLING_INTERVAL);\r\n  }\r\n\r\n  const connectWallet = async() => {    \r\n    try {\r\n      if(window.phantom?.solana.isPhantom){\r\n        const resp = await window.phantom?.solana.connect();\r\n        setConnected(true)\r\n        console.log(connected)\r\n        return resp.publicKey.toString();\r\n      }\r\n    } \r\n    catch (err) {\r\n      console.log(err);\r\n      console.log('error at connect wallet');\r\n    }\r\n  };\r\n\r\n  const disconectWallet = async() => {\r\n    try{\r\n      if(connected) {\r\n        await window.disconnect();\r\n        setConnected(false);\r\n        console.log(connected);\r\n      }\r\n    }\r\n    catch(err) {\r\n      console.error(err);\r\n      console.log('Error at wallet disconnect');\r\n    }\r\n    \r\n  }\r\n\r\n  const handleConnect = async() => {\r\n    try{\r\n      setWallet(await connectWallet())\r\n      console.log(`Connected with Public Key: ${wallet}`)\r\n    }\r\n    catch(e) {\r\n      console.log(e);\r\n      console.log(`error at handle Connect`);\r\n    }\r\n  }\r\n\r\n  const handleDisconnect = async() => {\r\n    try{\r\n      disconectWallet();\r\n      setWallet(null);\r\n    }\r\n    catch(e) {\r\n      console.log(e);\r\n      console.log(`error at handle Disonnect`);\r\n    }\r\n    disconectWallet();\r\n  }\r\n\r\n  const handleSend = async() => {\r\n    handleSignAndSendTransaction();\r\n  }\r\n\r\n  return (\r\n    <div className=\"phantom\">\r\n\r\n      <h3>Phantom wallet</h3>\r\n\r\n      <div>\r\n        <button className=\"buttons\" onClick={connected? handleDisconnect : handleConnect}>{connected ? \"Disconnect\" : \"Connect\"}</button>   \r\n        <input className=\"buttons\" onChange={(event) => setAmount(event.target.value)} type=\"text\" value={amount} />\r\n        <button className=\"buttons\" onClick={handleSend}>Send</button>   \r\n      </div>\r\n\r\n      {wallet === null? <p>Wallet not connected</p> :<p>connected to {wallet.substring(0, 4) + \"....\" + wallet.substr(wallet.length-4, wallet.length)}</p>}\r\n      {signStatus === \"success\" ? <p>Transaction Successfull</p> : null }\r\n      {signStatus === \"waiting\" ? <p>Waiting for conformation...</p> : null }\r\n      {signStatus === \"failed\" ? <p>Transaction Failed</p> : null }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Phantom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
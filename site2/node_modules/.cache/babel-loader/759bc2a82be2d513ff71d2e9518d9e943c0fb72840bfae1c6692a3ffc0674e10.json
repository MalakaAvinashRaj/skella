{"ast":null,"code":"var _jsxFileName = \"D:\\\\skella\\\\site2\\\\src\\\\components\\\\phantom.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Connection, Transaction, SystemProgram, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport './phantom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Phantom() {\n  _s();\n  const [wallet, setWallet] = useState(null);\n  const [amount, setAmount] = useState(0);\n  const [connected, setConnected] = useState(false);\n  const [walletBalance, setWalletBalance] = useState(0);\n  const [signStatus, setSignStatus] = useState('');\n  const [count, setCount] = useState(0);\n  const [key, setKey] = useState(null);\n  const MAX_POLLS = 60;\n  const POLLING_INTERVAL = 1000;\n  const network = clusterApiUrl('devnet');\n  const connection = new Connection(network, 'confirmed');\n  const getProvider = async () => {\n    if ('phantom' in window) {\n      var _window$phantom;\n      const provider = await ((_window$phantom = window.phantom) === null || _window$phantom === void 0 ? void 0 : _window$phantom.Connectionsolana);\n      if (provider !== null && provider !== void 0 && provider.isPhantom) {\n        return provider;\n      } else {\n        return console.log('Phantom is not available');\n      }\n    }\n  };\n  const provider = getProvider();\n\n  // const handleSignAndSendTransaction = useCallback(async () => {\n  //   // await getBalance();\n  //   // if(walletBalance < amount) return console.log('Insufficient funds');\n  //   try{\n  //     const transaction = await createTransferTransaction(provider.publicKey, connection);\n  //     const signature = await provider.signAndSendTransaction(transaction);\n  //     pollSignatureStatus(signature, connection);\n  //   }\n  //   catch(err){\n  //     console.log(err);\n  //   }\n  // })\n\n  // const createTransferTransaction = async (publicKey, connection) => {\n  //   const transaction = new Transaction().add(\n  //     SystemProgram.transfer({\n  //       fromPubkeys : publicKey,\n  //       toPubkeys : publicKey,\n  //       lamports: amount * Math.pow(10, 9),\n  //     })\n  //   )\n  //   return transaction\n  // }\n\n  // const pollSignatureStatus = async(signature, connection) => {\n\n  //   const interval = setInterval(async () => {\n  //     if (count === MAX_POLLS) {\n  //       clearInterval(interval);\n  //       setSignStatus('failed');\n  //       return;\n  //     }\n\n  //     const { value } = await connection.getSignatureStatus(signature);\n  //   const confirmationStatus = value?.confirmationStatus;\n\n  //   if (confirmationStatus) {\n  //     const hasReachedSufficientCommitment = confirmationStatus === 'confirmed' || confirmationStatus === 'finalized';\n\n  //     if (hasReachedSufficientCommitment) {\n  //       clearInterval(interval);\n  //       setSignStatus('success')\n  //       return;\n  //     }\n  //   } else {\n  //     setSignStatus('waiting');\n  //     console.log('Waiting on confirmation...');\n  //   }\n\n  //   setCount(count+1);\n\n  //   },POLLING_INTERVAL);\n  // }\n\n  const connectWallet = async () => {\n    try {\n      var _window$phantom2;\n      if ((_window$phantom2 = window.phantom) !== null && _window$phantom2 !== void 0 && _window$phantom2.solana.isPhantom) {\n        const resp = await window.solana.connect();\n        setConnected(!connected);\n        setWallet(resp.publicKey.toString());\n        setKey(new PublicKey(resp.publicKey.toString()));\n      }\n    } catch (err) {\n      console.log(err);\n      console.log('error at connect wallet');\n    }\n  };\n  const disconectWallet = async () => {\n    try {\n      await window.solana.disconnect();\n      setConnected(!connected);\n    } catch (err) {\n      console.error(err);\n      console.log('Error at wallet disconnect');\n    }\n    console.log(connected);\n  };\n  const handleSend = async () => {\n    let blockhash = (await connection.getLatestBlockhash('finalized')).blockhash;\n    console.log(blockhash);\n    const transaction = new Transaction();\n    transaction.recentBlockhash = blockhash;\n    const signedTransaction = await window.solana.signTransaction(transaction);\n    const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n    console.log(signature);\n  };\n  const handleConnectButton = async () => {\n    if (connected) {\n      try {\n        console.log(`handle Disconnect`);\n        disconectWallet();\n        setWallet(null);\n      } catch (e) {\n        console.log(e);\n        console.log(`error at handle Disonnect`);\n      }\n      console.log(connected);\n    } else {\n      try {\n        console.log(`handle Connect`);\n        await connectWallet();\n      } catch (e) {\n        console.log(e);\n        console.log(`error at handle Connect`);\n      }\n      console.log(`Connected with Public Key: ${wallet}`);\n      console.log(wallet);\n    }\n  };\n  const returnWallet = async () => {\n    console.log(wallet);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"phantom\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Phantom wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: handleConnectButton,\n        children: connected ? \"Disconnect\" : \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"buttons\",\n        onChange: event => setAmount(event.target.value),\n        type: \"text\",\n        value: amount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: handleSend,\n        disabled: !connected,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: returnWallet,\n        disabled: !connected,\n        children: \"Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 5\n    }, this), wallet === null ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Wallet not connected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"connected to \", wallet.substring(0, 4) + \"....\" + wallet.substr(wallet.length - 4, wallet.length)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 54\n    }, this), signStatus === \"success\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Transaction Successfull\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 33\n    }, this) : null, signStatus === \"waiting\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Waiting for conformation...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 33\n    }, this) : null, signStatus === \"failed\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Transaction Failed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 32\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 3\n  }, this);\n}\n_s(Phantom, \"jg9br5QopUby2M1fbxPPiug121A=\");\n_c = Phantom;\nexport default Phantom;\nvar _c;\n$RefreshReg$(_c, \"Phantom\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Connection","Transaction","SystemProgram","PublicKey","clusterApiUrl","jsxDEV","_jsxDEV","Phantom","_s","wallet","setWallet","amount","setAmount","connected","setConnected","walletBalance","setWalletBalance","signStatus","setSignStatus","count","setCount","key","setKey","MAX_POLLS","POLLING_INTERVAL","network","connection","getProvider","window","_window$phantom","provider","phantom","Connectionsolana","isPhantom","console","log","connectWallet","_window$phantom2","solana","resp","connect","publicKey","toString","err","disconectWallet","disconnect","error","handleSend","blockhash","getLatestBlockhash","transaction","recentBlockhash","signedTransaction","signTransaction","signature","sendRawTransaction","serialize","handleConnectButton","e","returnWallet","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","event","target","value","type","disabled","substring","substr","length","_c","$RefreshReg$"],"sources":["D:/skella/site2/src/components/phantom.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { Connection, Transaction, SystemProgram, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\r\nimport './phantom.css';\r\n\r\nexport function Phantom() {\r\n\r\n  const [wallet, setWallet] = useState(null);\r\n  const [amount, setAmount] = useState(0);\r\n  const [connected, setConnected] = useState(false);\r\n  const [walletBalance, setWalletBalance] = useState(0);\r\n  const [signStatus, setSignStatus] = useState('');\r\n  const [count, setCount] = useState(0);\r\n  const [key, setKey] = useState(null);\r\n\r\n  const MAX_POLLS = 60;\r\n  const POLLING_INTERVAL = 1000;\r\n\r\n  const network = clusterApiUrl('devnet');\r\n  const connection = new Connection(network, 'confirmed');\r\n\r\n  const getProvider = async () => {\r\n\r\n    if ('phantom' in window) {\r\n      const provider = await window.phantom?.Connectionsolana;\r\n\r\n      if (provider?.isPhantom) {\r\n        return provider;\r\n      }\r\n      else {\r\n        return console.log('Phantom is not available');\r\n      }\r\n    }\r\n  };\r\n\r\n  const provider = getProvider();\r\n\r\n// const handleSignAndSendTransaction = useCallback(async () => {\r\n//   // await getBalance();\r\n//   // if(walletBalance < amount) return console.log('Insufficient funds');\r\n//   try{\r\n//     const transaction = await createTransferTransaction(provider.publicKey, connection);\r\n//     const signature = await provider.signAndSendTransaction(transaction);\r\n//     pollSignatureStatus(signature, connection);\r\n//   }\r\n//   catch(err){\r\n//     console.log(err);\r\n//   }\r\n// })\r\n\r\n// const createTransferTransaction = async (publicKey, connection) => {\r\n//   const transaction = new Transaction().add(\r\n//     SystemProgram.transfer({\r\n//       fromPubkeys : publicKey,\r\n//       toPubkeys : publicKey,\r\n//       lamports: amount * Math.pow(10, 9),\r\n//     })\r\n//   )\r\n//   return transaction\r\n// }\r\n\r\n// const pollSignatureStatus = async(signature, connection) => {\r\n\r\n//   const interval = setInterval(async () => {\r\n//     if (count === MAX_POLLS) {\r\n//       clearInterval(interval);\r\n//       setSignStatus('failed');\r\n//       return;\r\n//     }\r\n\r\n//     const { value } = await connection.getSignatureStatus(signature);\r\n//   const confirmationStatus = value?.confirmationStatus;\r\n\r\n//   if (confirmationStatus) {\r\n//     const hasReachedSufficientCommitment = confirmationStatus === 'confirmed' || confirmationStatus === 'finalized';\r\n\r\n//     if (hasReachedSufficientCommitment) {\r\n//       clearInterval(interval);\r\n//       setSignStatus('success')\r\n//       return;\r\n//     }\r\n//   } else {\r\n//     setSignStatus('waiting');\r\n//     console.log('Waiting on confirmation...');\r\n//   }\r\n\r\n//   setCount(count+1);\r\n\r\n//   },POLLING_INTERVAL);\r\n// }\r\n\r\nconst connectWallet = async () => {\r\n  try {\r\n    if (window.phantom?.solana.isPhantom) {\r\n      const resp = await window.solana.connect();\r\n      setConnected(!connected);\r\n      setWallet(resp.publicKey.toString());\r\n      setKey(new PublicKey(resp.publicKey.toString()))\r\n    }\r\n  }\r\n  catch (err) {\r\n    console.log(err);\r\n    console.log('error at connect wallet');\r\n  }\r\n};\r\n\r\nconst disconectWallet = async () => {\r\n  try {\r\n    await window.solana.disconnect();\r\n    setConnected(!connected);\r\n  }\r\n  catch (err) {\r\n    console.error(err);\r\n    console.log('Error at wallet disconnect');\r\n  }\r\n  console.log(connected);\r\n}\r\n\r\nconst handleSend = async () => {\r\n  let blockhash = (await connection.getLatestBlockhash('finalized')).blockhash;\r\n  console.log(blockhash);\r\n  const transaction = new Transaction();\r\n  transaction.recentBlockhash = blockhash;\r\n  const signedTransaction = await window.solana.signTransaction(transaction);\r\n  const signature = await connection.sendRawTransaction(signedTransaction.serialize());\r\n  console.log(signature);\r\n}\r\n\r\nconst handleConnectButton = async () => {\r\n  if (connected) {\r\n    try {\r\n      console.log(`handle Disconnect`);\r\n      disconectWallet();\r\n      setWallet(null);\r\n    }\r\n    catch (e) {\r\n      console.log(e);\r\n      console.log(`error at handle Disonnect`);\r\n    }\r\n    console.log(connected);\r\n  }\r\n  else {\r\n    try {\r\n      console.log(`handle Connect`);\r\n      await connectWallet()\r\n    }\r\n    catch (e) {\r\n      console.log(e);\r\n      console.log(`error at handle Connect`);\r\n    }\r\n    console.log(`Connected with Public Key: ${wallet}`)\r\n    console.log(wallet);\r\n  }\r\n}\r\n\r\nconst returnWallet = async () => {\r\n  console.log(wallet);\r\n}\r\n\r\nreturn (\r\n  <div className=\"phantom\">\r\n\r\n    <h3>Phantom wallet</h3>\r\n\r\n    <div>\r\n      <button className=\"buttons\" onClick={handleConnectButton}>{connected ? \"Disconnect\" : \"Connect\"}</button>\r\n      <input className=\"buttons\" onChange={(event) => setAmount(event.target.value)} type=\"text\" value={amount} />\r\n      <button className=\"buttons\" onClick={handleSend} disabled={!connected} >Send</button>\r\n      <button className=\"buttons\" onClick={returnWallet} disabled={!connected} >Wallet</button>\r\n    </div>\r\n\r\n    {wallet === null ? <p>Wallet not connected</p> : <p>connected to {wallet.substring(0, 4) + \"....\" + wallet.substr(wallet.length - 4, wallet.length)}</p>}\r\n    {signStatus === \"success\" ? <p>Transaction Successfull</p> : null}\r\n    {signStatus === \"waiting\" ? <p>Waiting for conformation...</p> : null}\r\n    {signStatus === \"failed\" ? <p>Transaction Failed</p> : null}\r\n\r\n  </div>\r\n);\r\n}\r\n\r\nexport default Phantom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\skella\\\\site2\\\\src\\\\components\\\\phantom.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Connection, Transaction, SystemProgram, PublicKey, clusterApiUrl, ConfirmedTransaction } from \"@solana/web3.js\";\nimport './phantom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Phantom() {\n  _s();\n  const [wallet, setWallet] = useState(null);\n  const [amount, setAmount] = useState(0);\n  const [connected, setConnected] = useState(false);\n  const [walletBalance, setWalletBalance] = useState(0);\n  const [signStatus, setSignStatus] = useState('');\n  const [count, setCount] = useState(0);\n  const [key, setKey] = useState(null);\n  const [logs, setLogs] = useState([]);\n  const MAX_POLLS = 60;\n  const POLLING_INTERVAL = 1000;\n  const network = clusterApiUrl('devnet');\n  const connection = new Connection(network, 'confirmed');\n  function addLog(log) {\n    setLogs(logs => [...logs, log]);\n  }\n  const getProvider = async () => {\n    if ('phantom' in window) {\n      var _window$phantom;\n      const provider = await ((_window$phantom = window.phantom) === null || _window$phantom === void 0 ? void 0 : _window$phantom.Connectionsolana);\n      if (provider !== null && provider !== void 0 && provider.isPhantom) {\n        return provider;\n      } else {\n        return;\n      }\n    }\n  };\n  const provider = getProvider();\n\n  // const handleSignAndSendTransaction = useCallback(async () => {\n  //   // await getBalance();\n  //   // if(walletBalance < amount) return console.log('Insufficient funds');\n  //   try{\n  //     const transaction = await createTransferTransaction(provider.publicKey, connection);\n  //     const signature = await provider.signAndSendTransaction(transaction);\n  //     pollSignatureStatus(signature, connection);\n  //   }\n  //   catch(err){\n  //     console.log(err);\n  //   }\n  // })\n\n  // const createTransferTransaction = async (publicKey, connection) => {\n  //   const transaction = new Transaction().add(\n  //     SystemProgram.transfer({\n  //       fromPubkeys : publicKey,\n  //       toPubkeys : publicKey,\n  //       lamports: amount * Math.pow(10, 9),\n  //     })\n  //   )\n  //   return transaction\n  // }\n\n  // const pollSignatureStatus = async(signature, connection) => {\n\n  //   const interval = setInterval(async () => {\n  //     if (count === MAX_POLLS) {\n  //       clearInterval(interval);\n  //       setSignStatus('failed');\n  //       return;\n  //     }\n\n  //     const { value } = await connection.getSignatureStatus(signature);\n  //   const confirmationStatus = value?.confirmationStatus;\n\n  //   if (confirmationStatus) {\n  //     const hasReachedSufficientCommitment = confirmationStatus === 'confirmed' || confirmationStatus === 'finalized';\n\n  //     if (hasReachedSufficientCommitment) {\n  //       clearInterval(interval);\n  //       setSignStatus('success')\n  //       return;\n  //     }\n  //   } else {\n  //     setSignStatus('waiting');\n  //     console.log('Waiting on confirmation...');\n  //   }\n\n  //   setCount(count+1);\n\n  //   },POLLING_INTERVAL);\n  // }\n\n  const connectWallet = async () => {\n    try {\n      var _window$phantom2;\n      if ((_window$phantom2 = window.phantom) !== null && _window$phantom2 !== void 0 && _window$phantom2.solana.isPhantom) {\n        const resp = await window.solana.connect();\n        setConnected(!connected);\n        setWallet(resp.publicKey.toString());\n        setKey(new PublicKey(resp.publicKey.toString()));\n      }\n    } catch (err) {\n      console.log(err);\n      console.log('error at connect wallet');\n    }\n  };\n  const disconectWallet = async () => {\n    try {\n      await window.solana.disconnect();\n      setConnected(!connected);\n    } catch (err) {\n      console.error(err);\n      console.log('Error at wallet disconnect');\n    }\n    console.log(connected);\n  };\n  const handleSend = async () => {\n    const transaction = new Transaction().add(SystemProgram.transfer({\n      fromPubkey: key,\n      toPubkey: key,\n      lamports: amount * 10 ^ 9\n    }));\n    addLog('Getting recent blockhash');\n    transaction.recentBlockhash = await connection.getLatestBlockhash('finalized').blockhash;\n    transaction.feePayer = key;\n    addLog('Sending signature request to wallet');\n    const signedTransaction = await window.solana.signTransaction(transaction);\n    addLog('Got signature, submitting transaction');\n    const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n    addLog('Submitted transaction ' + signature + ', awaiting confirmation');\n    await connection.confirmedTransaction(signature, 'singleGossip');\n    console.log(signature);\n  };\n  const handleConnectButton = async () => {\n    if (connected) {\n      try {\n        console.log(`handle Disconnect`);\n        disconectWallet();\n        setWallet(null);\n      } catch (e) {\n        console.log(e);\n        console.log(`error at handle Disonnect`);\n      }\n      console.log(connected);\n    } else {\n      try {\n        console.log(`handle Connect`);\n        await connectWallet();\n      } catch (e) {\n        console.log(e);\n        console.log(`error at handle Connect`);\n      }\n      console.log(`Connected with Public Key: ${wallet}`);\n      console.log(wallet);\n    }\n  };\n  const returnWallet = async () => {\n    console.log(wallet);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"phantom\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Phantom wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: handleConnectButton,\n        children: connected ? \"Disconnect\" : \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"buttons\",\n        onChange: event => setAmount(event.target.value),\n        type: \"text\",\n        value: amount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: handleSend,\n        disabled: !connected,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: returnWallet,\n        disabled: !connected,\n        children: \"Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 5\n    }, this), wallet === null ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Wallet not connected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"connected to \", wallet.substring(0, 4) + \"....\" + wallet.substr(wallet.length - 4, wallet.length)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 54\n    }, this), signStatus === \"success\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Transaction Successfull\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 33\n    }, this) : null, signStatus === \"waiting\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Waiting for conformation...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 33\n    }, this) : null, signStatus === \"failed\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Transaction Failed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 32\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 3\n  }, this);\n}\n_s(Phantom, \"KDZuBb3Qjjmgwwuvgy6BZVt3pTw=\");\n_c = Phantom;\nexport default Phantom;\nvar _c;\n$RefreshReg$(_c, \"Phantom\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Connection","Transaction","SystemProgram","PublicKey","clusterApiUrl","ConfirmedTransaction","jsxDEV","_jsxDEV","Phantom","_s","wallet","setWallet","amount","setAmount","connected","setConnected","walletBalance","setWalletBalance","signStatus","setSignStatus","count","setCount","key","setKey","logs","setLogs","MAX_POLLS","POLLING_INTERVAL","network","connection","addLog","log","getProvider","window","_window$phantom","provider","phantom","Connectionsolana","isPhantom","connectWallet","_window$phantom2","solana","resp","connect","publicKey","toString","err","console","disconectWallet","disconnect","error","handleSend","transaction","add","transfer","fromPubkey","toPubkey","lamports","recentBlockhash","getLatestBlockhash","blockhash","feePayer","signedTransaction","signTransaction","signature","sendRawTransaction","serialize","confirmedTransaction","handleConnectButton","e","returnWallet","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","event","target","value","type","disabled","substring","substr","length","_c","$RefreshReg$"],"sources":["D:/skella/site2/src/components/phantom.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { Connection, Transaction, SystemProgram, PublicKey, clusterApiUrl, ConfirmedTransaction } from \"@solana/web3.js\";\r\nimport './phantom.css';\r\n\r\nexport function Phantom() {\r\n\r\n  const [wallet, setWallet] = useState(null);\r\n  const [amount, setAmount] = useState(0);\r\n  const [connected, setConnected] = useState(false);\r\n  const [walletBalance, setWalletBalance] = useState(0);\r\n  const [signStatus, setSignStatus] = useState('');\r\n  const [count, setCount] = useState(0);\r\n  const [key, setKey] = useState(null);\r\n  const [logs, setLogs] = useState([]);\r\n\r\n  const MAX_POLLS = 60;\r\n  const POLLING_INTERVAL = 1000;\r\n\r\n  const network = clusterApiUrl('devnet');\r\n  const connection = new Connection(network, 'confirmed');\r\n\r\n  function addLog(log) {\r\n    setLogs((logs) => [...logs, log]);\r\n  }\r\n\r\n  const getProvider = async () => {\r\n\r\n    if ('phantom' in window) {\r\n      const provider = await window.phantom?.Connectionsolana;\r\n\r\n      if (provider?.isPhantom) {\r\n        return provider;\r\n      }\r\n      else {\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  const provider = getProvider();\r\n\r\n// const handleSignAndSendTransaction = useCallback(async () => {\r\n//   // await getBalance();\r\n//   // if(walletBalance < amount) return console.log('Insufficient funds');\r\n//   try{\r\n//     const transaction = await createTransferTransaction(provider.publicKey, connection);\r\n//     const signature = await provider.signAndSendTransaction(transaction);\r\n//     pollSignatureStatus(signature, connection);\r\n//   }\r\n//   catch(err){\r\n//     console.log(err);\r\n//   }\r\n// })\r\n\r\n// const createTransferTransaction = async (publicKey, connection) => {\r\n//   const transaction = new Transaction().add(\r\n//     SystemProgram.transfer({\r\n//       fromPubkeys : publicKey,\r\n//       toPubkeys : publicKey,\r\n//       lamports: amount * Math.pow(10, 9),\r\n//     })\r\n//   )\r\n//   return transaction\r\n// }\r\n\r\n// const pollSignatureStatus = async(signature, connection) => {\r\n\r\n//   const interval = setInterval(async () => {\r\n//     if (count === MAX_POLLS) {\r\n//       clearInterval(interval);\r\n//       setSignStatus('failed');\r\n//       return;\r\n//     }\r\n\r\n//     const { value } = await connection.getSignatureStatus(signature);\r\n//   const confirmationStatus = value?.confirmationStatus;\r\n\r\n//   if (confirmationStatus) {\r\n//     const hasReachedSufficientCommitment = confirmationStatus === 'confirmed' || confirmationStatus === 'finalized';\r\n\r\n//     if (hasReachedSufficientCommitment) {\r\n//       clearInterval(interval);\r\n//       setSignStatus('success')\r\n//       return;\r\n//     }\r\n//   } else {\r\n//     setSignStatus('waiting');\r\n//     console.log('Waiting on confirmation...');\r\n//   }\r\n\r\n//   setCount(count+1);\r\n\r\n//   },POLLING_INTERVAL);\r\n// }\r\n\r\nconst connectWallet = async () => {\r\n  try {\r\n    if (window.phantom?.solana.isPhantom) {\r\n      const resp = await window.solana.connect();\r\n      setConnected(!connected);\r\n      setWallet(resp.publicKey.toString());\r\n      setKey(new PublicKey(resp.publicKey.toString()))\r\n    }\r\n  }\r\n  catch (err) {\r\n    console.log(err);\r\n    console.log('error at connect wallet');\r\n  }\r\n};\r\n\r\nconst disconectWallet = async () => {\r\n  try {\r\n    await window.solana.disconnect();\r\n    setConnected(!connected);\r\n  }\r\n  catch (err) {\r\n    console.error(err);\r\n    console.log('Error at wallet disconnect');\r\n  }\r\n  console.log(connected);\r\n}\r\n\r\nconst handleSend = async () => {\r\n\r\n  const transaction = new Transaction().add(\r\n    SystemProgram.transfer({\r\n      fromPubkey: key,\r\n      toPubkey: key,\r\n      lamports: amount*10^9,\r\n    }),\r\n  );\r\n  addLog('Getting recent blockhash');\r\n\r\n  transaction.recentBlockhash = await connection.getLatestBlockhash('finalized').blockhash;\r\n  transaction.feePayer = key;\r\n  \r\n  addLog('Sending signature request to wallet');\r\n  const signedTransaction = await window.solana.signTransaction(transaction);\r\n  addLog('Got signature, submitting transaction');\r\n  const signature = await connection.sendRawTransaction(signedTransaction.serialize());\r\n  addLog('Submitted transaction ' + signature + ', awaiting confirmation');\r\n  await connection.confirmedTransaction(signature, 'singleGossip');\r\n\r\n  console.log(signature);\r\n\r\n}\r\n\r\nconst handleConnectButton = async () => {\r\n  if (connected) {\r\n    try {\r\n      console.log(`handle Disconnect`);\r\n      disconectWallet();\r\n      setWallet(null);\r\n    }\r\n    catch (e) {\r\n      console.log(e);\r\n      console.log(`error at handle Disonnect`);\r\n    }\r\n    console.log(connected);\r\n  }\r\n  else {\r\n    try {\r\n      console.log(`handle Connect`);\r\n      await connectWallet()\r\n    }\r\n    catch (e) {\r\n      console.log(e);\r\n      console.log(`error at handle Connect`);\r\n    }\r\n    console.log(`Connected with Public Key: ${wallet}`)\r\n    console.log(wallet);\r\n  }\r\n}\r\n\r\nconst returnWallet = async () => {\r\n  console.log(wallet);\r\n}\r\n\r\nreturn (\r\n  <div className=\"phantom\">\r\n\r\n    <h3>Phantom wallet</h3>\r\n\r\n    <div>\r\n      <button className=\"buttons\" onClick={handleConnectButton}>{connected ? \"Disconnect\" : \"Connect\"}</button>\r\n      <input className=\"buttons\" onChange={(event) => setAmount(event.target.value)} type=\"text\" value={amount} />\r\n      <button className=\"buttons\" onClick={handleSend} disabled={!connected} >Send</button>\r\n      <button className=\"buttons\" onClick={returnWallet} disabled={!connected} >Wallet</button>\r\n    </div>\r\n\r\n    {wallet === null ? <p>Wallet not connected</p> : <p>connected to {wallet.substring(0, 4) + \"....\" + wallet.substr(wallet.length - 4, wallet.length)}</p>}\r\n    {signStatus === \"success\" ? <p>Transaction Successfull</p> : null}\r\n    {signStatus === \"waiting\" ? <p>Waiting for conformation...</p> : null}\r\n    {signStatus === \"failed\" ? <p>Transaction Failed</p> : null}\r\n\r\n  </div>\r\n);\r\n}\r\n\r\nexport default Phantom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
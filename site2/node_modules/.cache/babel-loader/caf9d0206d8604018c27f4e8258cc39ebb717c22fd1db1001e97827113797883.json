{"ast":null,"code":"var _jsxFileName = \"D:\\\\skella\\\\site2\\\\src\\\\components\\\\phantom.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Connection, Transaction, SystemProgram, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport './phantom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Phantom() {\n  _s();\n  const [wallet, setWallet] = useState(null);\n  const [amount, setAmount] = useState(0);\n  const [connected, setConnected] = useState(false);\n  const [walletBalance, setWalletBalance] = useState(0);\n  const [signStatus, setSignStatus] = useState('');\n  const [count, setCount] = useState(0);\n  const MAX_POLLS = 60;\n  const POLLING_INTERVAL = 1000;\n  const network = clusterApiUrl('devnet');\n  const connection = new Connection(network, 'confirmed');\n  const getProvider = async () => {\n    if ('solana' in window) {\n      const provider = await window.solana;\n      if (provider.isPhantom) {\n        return provider;\n      } else {\n        return console.log('Phantom is not available');\n      }\n    }\n  };\n  const provider = getProvider();\n  const getBalance = async () => {\n    try {\n      if (!provider) return;\n      setWalletBalance(await connection.getBalance(wallet));\n      console.log(`Balance: ${walletBalance}`);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  const handleSignAndSendTransaction = async () => {\n    if (!provider) return;\n    await getBalance();\n    if (walletBalance < amount) return console.log('Insufficient funds');\n    try {\n      const transaction = await createTransferTransaction(provider.publicKey, connection);\n      const signature = await provider.signAndSendTransaction(transaction);\n      pollSignatureStatus(signature, connection);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const createTransferTransaction = async (publicKey, connection) => {\n    const transaction = new Transaction().add(SystemProgram.transfer({\n      fromPubkeys: publicKey,\n      toPubkeys: publicKey,\n      lamports: amount * Math.pow(10, 9)\n    }));\n    return transaction;\n  };\n  const pollSignatureStatus = async (signature, connection) => {\n    const interval = setInterval(async () => {\n      if (count === MAX_POLLS) {\n        clearInterval(interval);\n        setSignStatus('failed');\n        return;\n      }\n      const {\n        value\n      } = await connection.getSignatureStatus(signature);\n      const confirmationStatus = value === null || value === void 0 ? void 0 : value.confirmationStatus;\n      if (confirmationStatus) {\n        const hasReachedSufficientCommitment = confirmationStatus === 'confirmed' || confirmationStatus === 'finalized';\n        if (hasReachedSufficientCommitment) {\n          clearInterval(interval);\n          setSignStatus('success');\n          return;\n        }\n      } else {\n        setSignStatus('waiting');\n        console.log('Waiting on confirmation...');\n      }\n      setCount(count + 1);\n    }, POLLING_INTERVAL);\n  };\n  const connectWallet = async () => {\n    try {\n      var _window$phantom;\n      if ((_window$phantom = window.phantom) !== null && _window$phantom !== void 0 && _window$phantom.solana.isPhantom) {\n        var _window$phantom2;\n        const resp = await ((_window$phantom2 = window.phantom) === null || _window$phantom2 === void 0 ? void 0 : _window$phantom2.solana.connect());\n        setConnected(true);\n        setWallet(resp.publicKey.toString());\n      }\n    } catch (err) {\n      console.log(err);\n      console.log('error at connect wallet');\n    }\n  };\n  const disconectWallet = async () => {\n    try {\n      await window.solana.disconnect();\n      setConnected(false);\n    } catch (err) {\n      console.error(err);\n      console.log('Error at wallet disconnect');\n    }\n    console.log(connected);\n  };\n  const handleSend = async () => {\n    await handleSignAndSendTransaction();\n  };\n  const handleConnectButton = async () => {\n    if (connected) {\n      try {\n        console.log(`handle Disconnect`);\n        disconectWallet();\n        setWallet(null);\n      } catch (e) {\n        console.log(e);\n        console.log(`error at handle Disonnect`);\n      }\n      console.log(connected);\n    } else {\n      try {\n        console.log(`handle Connect`);\n        await connectWallet();\n      } catch (e) {\n        console.log(e);\n        console.log(`error at handle Connect`);\n      }\n      console.log(`Connected with Public Key: ${wallet}`);\n      console.log(wallet);\n    }\n  };\n  const returnWallet = async () => {\n    console.log(wallet);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"phantom\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Phantom wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: handleConnectButton,\n        children: connected ? \"Disconnect\" : \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"buttons\",\n        onChange: event => setAmount(event.target.value),\n        type: \"text\",\n        value: amount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: handleSend,\n        disabled: !connected,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: returnWallet,\n        children: \"Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: getBalance,\n        disabled: !connected,\n        children: \"Balance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), !connected ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Wallet not connected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 20\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"connected to \", wallet.substring(0, 4) + \"....\" + wallet.substr(wallet.length - 4, wallet.length)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 49\n    }, this), signStatus === \"success\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Transaction Successfull\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 35\n    }, this) : null, signStatus === \"waiting\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Waiting for conformation...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 35\n    }, this) : null, signStatus === \"failed\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Transaction Failed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 34\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n}\n_s(Phantom, \"iyeN9KVZ/bkXyaNtKc+f8OZjpk8=\");\n_c = Phantom;\nexport default Phantom;\nvar _c;\n$RefreshReg$(_c, \"Phantom\");","map":{"version":3,"names":["React","useEffect","useState","Connection","Transaction","SystemProgram","PublicKey","clusterApiUrl","jsxDEV","_jsxDEV","Phantom","_s","wallet","setWallet","amount","setAmount","connected","setConnected","walletBalance","setWalletBalance","signStatus","setSignStatus","count","setCount","MAX_POLLS","POLLING_INTERVAL","network","connection","getProvider","window","provider","solana","isPhantom","console","log","getBalance","err","error","handleSignAndSendTransaction","transaction","createTransferTransaction","publicKey","signature","signAndSendTransaction","pollSignatureStatus","add","transfer","fromPubkeys","toPubkeys","lamports","Math","pow","interval","setInterval","clearInterval","value","getSignatureStatus","confirmationStatus","hasReachedSufficientCommitment","connectWallet","_window$phantom","phantom","_window$phantom2","resp","connect","toString","disconectWallet","disconnect","handleSend","handleConnectButton","e","returnWallet","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","event","target","type","disabled","substring","substr","length","_c","$RefreshReg$"],"sources":["D:/skella/site2/src/components/phantom.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Connection, Transaction, SystemProgram,PublicKey, clusterApiUrl } from \"@solana/web3.js\";\r\nimport './phantom.css';\r\n\r\nexport function Phantom() {\r\n\r\n  const [wallet, setWallet] = useState(null);\r\n  const [amount, setAmount] = useState(0);\r\n  const [connected, setConnected] = useState(false);\r\n  const [walletBalance, setWalletBalance] = useState(0);\r\n  const [signStatus, setSignStatus] = useState('');\r\n  const [count, setCount] = useState(0);\r\n\r\n  const MAX_POLLS = 60;\r\n  const POLLING_INTERVAL = 1000;\r\n\r\n  const network = clusterApiUrl('devnet');\r\n  const connection = new Connection(network, 'confirmed');\r\n\r\n  const getProvider = async() => {\r\n    \r\n    if ('solana' in window) {\r\n      const provider =  await window.solana;\r\n  \r\n      if (provider.isPhantom) {\r\n        return provider;\r\n      }\r\n      else {\r\n        return console.log('Phantom is not available');\r\n      }\r\n    }\r\n  };\r\n\r\n  const provider = getProvider();\r\n\r\n  const getBalance = async () => {\r\n    try {\r\n      if(!provider) return;\r\n\r\n      setWalletBalance(await connection.getBalance(wallet));\r\n      console.log(`Balance: ${walletBalance}`);\r\n    }\r\n    catch(err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  const handleSignAndSendTransaction = async () => {\r\n    if (!provider) return;\r\n    await getBalance();\r\n    if(walletBalance < amount) return console.log('Insufficient funds');\r\n    try{\r\n      const transaction = await createTransferTransaction(provider.publicKey, connection);\r\n      const signature = await provider.signAndSendTransaction(transaction);\r\n      pollSignatureStatus(signature, connection);\r\n    }\r\n    catch(err){\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const createTransferTransaction = async (publicKey, connection) => {\r\n    const transaction = new Transaction().add(\r\n      SystemProgram.transfer({\r\n        fromPubkeys : publicKey,\r\n        toPubkeys : publicKey,\r\n        lamports: amount * Math.pow(10, 9),\r\n      })\r\n    )\r\n    return transaction\r\n  }\r\n\r\n  const pollSignatureStatus = async(signature, connection) => {\r\n\r\n    const interval = setInterval(async () => {\r\n      if (count === MAX_POLLS) {\r\n        clearInterval(interval);\r\n        setSignStatus('failed');\r\n        return;\r\n      }\r\n      \r\n      const { value } = await connection.getSignatureStatus(signature);\r\n    const confirmationStatus = value?.confirmationStatus;\r\n\r\n    if (confirmationStatus) {\r\n      const hasReachedSufficientCommitment = confirmationStatus === 'confirmed' || confirmationStatus === 'finalized';\r\n\r\n      if (hasReachedSufficientCommitment) {\r\n        clearInterval(interval);\r\n        setSignStatus('success')\r\n        return;\r\n      }\r\n    } else {\r\n      setSignStatus('waiting');\r\n      console.log('Waiting on confirmation...');\r\n    }\r\n\r\n    setCount(count+1);\r\n\r\n    },POLLING_INTERVAL);\r\n  }\r\n\r\n  const connectWallet = async() => {    \r\n    try {\r\n      if(window.phantom?.solana.isPhantom){\r\n        const resp = await window.phantom?.solana.connect();\r\n        setConnected(true)\r\n        setWallet(resp.publicKey.toString());\r\n      }\r\n    } \r\n    catch (err) {\r\n      console.log(err);\r\n      console.log('error at connect wallet');\r\n    }\r\n  };\r\n\r\n  const disconectWallet = async() => {\r\n    try{\r\n      await window.solana.disconnect();\r\n      setConnected(false);\r\n    }\r\n    catch(err) {\r\n      console.error(err);\r\n      console.log('Error at wallet disconnect');\r\n    }\r\n    console.log(connected);\r\n  }\r\n\r\n  const handleSend = async() => {\r\n    await handleSignAndSendTransaction();\r\n  }\r\n\r\n  const handleConnectButton = async() => {\r\n    if(connected) {\r\n      try{\r\n        console.log(`handle Disconnect`);\r\n        disconectWallet();\r\n        setWallet(null);\r\n      }\r\n      catch(e) {\r\n        console.log(e);\r\n        console.log(`error at handle Disonnect`);\r\n      }\r\n      console.log(connected);\r\n    }\r\n    else {\r\n      try{\r\n        console.log(`handle Connect`);\r\n        await connectWallet()\r\n      }\r\n      catch(e) {\r\n        console.log(e);\r\n        console.log(`error at handle Connect`);\r\n      }\r\n      console.log(`Connected with Public Key: ${wallet}`)\r\n      console.log(wallet);\r\n    }\r\n  }\r\n\r\n  const returnWallet = async() => {\r\n    console.log(wallet);\r\n  }\r\n\r\n  return (\r\n    <div className=\"phantom\">\r\n\r\n      <h3>Phantom wallet</h3>\r\n\r\n      <div>\r\n        <button className=\"buttons\" onClick={handleConnectButton}>{connected ? \"Disconnect\" : \"Connect\"}</button>   \r\n        <input className=\"buttons\" onChange={(event) => setAmount(event.target.value)} type=\"text\" value={amount} />\r\n        <button className=\"buttons\" onClick={handleSend} disabled={!connected} >Send</button>   \r\n        <button className=\"buttons\" onClick={returnWallet} >Wallet</button>   \r\n        <button className=\"buttons\" onClick={getBalance} disabled={!connected} >Balance</button>   \r\n      </div>\r\n\r\n      {!connected? <p>Wallet not connected</p> :<p>connected to {wallet.substring(0, 4) + \"....\" + wallet.substr(wallet.length-4, wallet.length)}</p>}\r\n      {signStatus === \"success\" ? <p>Transaction Successfull</p> : null }\r\n      {signStatus === \"waiting\" ? <p>Waiting for conformation...</p> : null }\r\n      {signStatus === \"failed\" ? <p>Transaction Failed</p> : null }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Phantom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { Buffer } from 'buffer';\nimport { sha512 } from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport { coerce, instance, string, tuple, literal, unknown, type, number, array, nullable, optional, boolean, record, union, create, any, assert as assert$1 } from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport createRpc from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport { keccak_256 } from '@noble/hashes/sha3';\nimport { hmac } from '@noble/hashes/hmac';\nimport * as secp256k1 from '@noble/secp256k1';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\ned25519.utils.sha512Sync = function () {\n  return sha512(ed25519.utils.concatBytes(...arguments));\n};\nconst generatePrivateKey = ed25519.utils.randomPrivateKey;\nconst generateKeypair = () => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey\n  };\n};\nconst getPublicKey = ed25519.sync.getPublicKey;\nfunction isOnCurve(publicKey) {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nconst sign = (message, secretKey) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nconst verify = ed25519.sync.verify;\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\n// Class wrapping a plain object\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\nconst SOLANA_SCHEMA = new Map();\nlet _Symbol$toStringTag;\n\n/**\n * Maximum length of derived pubkey seed\n */\nconst MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nconst PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\n_Symbol$toStringTag = Symbol.toStringTag;\nclass PublicKey extends Struct {\n  /** @internal */\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    this._bn = void 0;\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique() {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n  toJSON() {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes() {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  get [_Symbol$toStringTag]() {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString() {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\nPublicKey.default = new PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nclass Account {\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    this._publicKey = void 0;\n    this._secretKey = void 0;\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey() {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey() {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst VERSION_PREFIX_MASK = 0x7f;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\nclass TransactionExpiredBlockheightExceededError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\nclass TransactionExpiredTimeoutError extends Error {\n  constructor(signature, timeoutSeconds) {\n    super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` + 'unknown if it succeeded or failed. Check signature ' + `${signature} using the Solana Explorer or CLI tools.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\nclass TransactionExpiredNonceInvalidError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError'\n});\nclass MessageAccountKeys {\n  constructor(staticAccountKeys, accountKeysFromLookups) {\n    this.staticAccountKeys = void 0;\n    this.accountKeysFromLookups = void 0;\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n  keySegments() {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n  get(index) {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n  get length() {\n    return this.keySegments().flat().length;\n  }\n  compileInstructions(instructions) {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n    const keyIndexMap = new Map();\n    this.keySegments().flat().forEach((key, index) => {\n      keyIndexMap.set(key.toBase58(), index);\n    });\n    const findKeyIndex = key => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');\n      return keyIndex;\n    };\n    return instructions.map(instruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta => findKeyIndex(meta.pubkey)),\n        data: instruction.data\n      };\n    });\n  }\n}\n\n/**\n * Layout for a public key\n */\nconst publicKey = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'publicKey';\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nconst signature = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'signature';\n  return BufferLayout.blob(64, property);\n};\n/**\n * Layout for a Rust String type\n */\nconst rustString = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'string';\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n  const rslShim = rsl;\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nconst authorized = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'authorized';\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nconst lockup = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'lockup';\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n\n/**\n *  Layout for a VoteInit object\n */\nconst voteInit = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteInit';\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nconst voteAuthorizeWithSeedArgs = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteAuthorizeWithSeedArgs';\n  return BufferLayout.struct([BufferLayout.u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);\n};\nfunction getAlloc(type, fields) {\n  const getItemAlloc = item => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({\n        layout: item\n      }, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\nclass CompiledKeys {\n  constructor(payer, keyMetaMap) {\n    this.payer = void 0;\n    this.keyMetaMap = void 0;\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n  static compile(instructions, payer) {\n    const keyMetaMap = new Map();\n    const getOrInsertDefault = pubkey => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner || (keyMeta.isSigner = accountMeta.isSigner);\n        keyMeta.isWritable || (keyMeta.isWritable = accountMeta.isWritable);\n      }\n    }\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n  getMessageComponents() {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n    const writableSigners = mapEntries.filter(_ref => {\n      let [, meta] = _ref;\n      return meta.isSigner && meta.isWritable;\n    });\n    const readonlySigners = mapEntries.filter(_ref2 => {\n      let [, meta] = _ref2;\n      return meta.isSigner && !meta.isWritable;\n    });\n    const writableNonSigners = mapEntries.filter(_ref3 => {\n      let [, meta] = _ref3;\n      return !meta.isSigner && meta.isWritable;\n    });\n    const readonlyNonSigners = mapEntries.filter(_ref4 => {\n      let [, meta] = _ref4;\n      return !meta.isSigner && !meta.isWritable;\n    });\n    const header = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length\n    };\n\n    // sanity checks\n    {\n      assert(writableSigners.length > 0, 'Expected at least one writable signer key');\n      const [payerAddress] = writableSigners[0];\n      assert(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');\n    }\n    const staticAccountKeys = [...writableSigners.map(_ref5 => {\n      let [address] = _ref5;\n      return new PublicKey(address);\n    }), ...readonlySigners.map(_ref6 => {\n      let [address] = _ref6;\n      return new PublicKey(address);\n    }), ...writableNonSigners.map(_ref7 => {\n      let [address] = _ref7;\n      return new PublicKey(address);\n    }), ...readonlyNonSigners.map(_ref8 => {\n      let [address] = _ref8;\n      return new PublicKey(address);\n    })];\n    return [header, staticAccountKeys];\n  }\n  extractTableLookup(lookupTable) {\n    const [writableIndexes, drainedWritableKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable);\n    const [readonlyIndexes, drainedReadonlyKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable);\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n    return [{\n      accountKey: lookupTable.key,\n      writableIndexes,\n      readonlyIndexes\n    }, {\n      writable: drainedWritableKeys,\n      readonly: drainedReadonlyKeys\n    }];\n  }\n\n  /** @internal */\n  drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry => entry.equals(key));\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\n\n/**\n * List of instructions to be processed atomically\n */\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n  get version() {\n    return 'legacy';\n  }\n  get staticAccountKeys() {\n    return this.accountKeys;\n  }\n  get compiledInstructions() {\n    return this.instructions.map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accountKeyIndexes: ix.accounts,\n      data: bs58.decode(ix.data)\n    }));\n  }\n  get addressTableLookups() {\n    return [];\n  }\n  getAccountKeys() {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accounts: ix.accountKeyIndexes,\n      data: bs58.encode(ix.data)\n    }));\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions\n    });\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = byteArray.shift();\n    if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n      throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n    }\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountCount = decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n}\n\n/**\n * Message constructor arguments\n */\n\nclass MessageV0 {\n  constructor(args) {\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n  get version() {\n    return 0;\n  }\n  get numAccountKeysFromLookups() {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n  getAccountKeys(args) {\n    let accountKeysFromLookups;\n    if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {\n      if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {\n        throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error('Failed to get account keys because address table lookups were not resolved');\n    }\n    return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce((count, lookup) => count + lookup.writableIndexes.length, 0);\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  resolveAddressTableLookups(addressLookupTableAccounts) {\n    const accountKeysFromLookups = {\n      writable: [],\n      readonly: []\n    };\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account => account.key.equals(tableLookup.accountKey));\n      if (!tableAccount) {\n        throw new Error(`Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`);\n      }\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n    }\n    return accountKeysFromLookups;\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const addressTableLookups = new Array();\n    const accountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array()\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {\n          writable,\n          readonly\n        }] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);\n    const compiledInstructions = accountKeys.compileInstructions(args.instructions);\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n  serialize() {\n    const encodedStaticAccountKeysLength = Array();\n    encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array();\n    encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array();\n    encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n    const messageLayout = BufferLayout.struct([BufferLayout.u8('prefix'), BufferLayout.struct([BufferLayout.u8('numRequiredSignatures'), BufferLayout.u8('numReadonlySignedAccounts'), BufferLayout.u8('numReadonlyUnsignedAccounts')], 'header'), BufferLayout.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'), BufferLayout.blob(serializedInstructions.length, 'serializedInstructions'), BufferLayout.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), BufferLayout.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode({\n      prefix: MESSAGE_VERSION_0_PREFIX,\n      header: this.header,\n      staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n      staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n      instructionsLength: new Uint8Array(encodedInstructionsLength),\n      serializedInstructions,\n      addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n      serializedAddressTableLookups\n    }, serializedMessage);\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n  serializeInstructions() {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array();\n      encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n      const encodedDataLength = Array();\n      encodeLength(encodedDataLength, instruction.data.length);\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'), BufferLayout.blob(instruction.data.length, 'data')]);\n      serializedLength += instructionLayout.encode({\n        programIdIndex: instruction.programIdIndex,\n        encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n        accountKeyIndexes: instruction.accountKeyIndexes,\n        encodedDataLength: new Uint8Array(encodedDataLength),\n        data: instruction.data\n      }, serializedInstructions, serializedLength);\n    }\n    return serializedInstructions.slice(0, serializedLength);\n  }\n  serializeAddressTableLookups() {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array();\n      encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n      const encodedReadonlyIndexesLength = Array();\n      encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n      const addressTableLookupLayout = BufferLayout.struct([publicKey('accountKey'), BufferLayout.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, 'writableIndexes'), BufferLayout.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n      serializedLength += addressTableLookupLayout.encode({\n        accountKey: lookup.accountKey.toBytes(),\n        encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n        writableIndexes: lookup.writableIndexes,\n        encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n        readonlyIndexes: lookup.readonlyIndexes\n      }, serializedAddressTableLookups, serializedLength);\n    }\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n  static deserialize(serializedMessage) {\n    let byteArray = [...serializedMessage];\n    const prefix = byteArray.shift();\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(prefix !== maskedPrefix, `Expected versioned message but received legacy message`);\n    const version = maskedPrefix;\n    assert(version === 0, `Expected versioned message with version 0 but found version ${version}`);\n    const header = {\n      numRequiredSignatures: byteArray.shift(),\n      numReadonlySignedAccounts: byteArray.shift(),\n      numReadonlyUnsignedAccounts: byteArray.shift()\n    };\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)));\n    }\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n    const instructionCount = decodeLength(byteArray);\n    const compiledInstructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountKeyIndexesLength = decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data\n      });\n    }\n    const addressTableLookupsCount = decodeLength(byteArray);\n    const addressTableLookups = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes\n      });\n    }\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n}\n\n// eslint-disable-next-line no-redeclare\nconst VersionedMessage = {\n  deserializeMessageVersion(serializedMessage) {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n  deserialize: serializedMessage => {\n    const version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(`Transaction message version ${version} deserialization is not supported`);\n    }\n  }\n};\n\n/**\n * Transaction signature as base-58 encoded string\n */\n\nlet TransactionStatus;\n\n/**\n * Default (empty) signature\n */\n(function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n  TransactionStatus[TransactionStatus[\"NONCE_INVALID\"] = 3] = \"NONCE_INVALID\";\n})(TransactionStatus || (TransactionStatus = {}));\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * Transaction Instruction class\n */\nclass TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n\n  /**\n   * Program Id to execute\n   */\n\n  /**\n   * Program input\n   */\n\n  constructor(opts) {\n    this.keys = void 0;\n    this.programId = void 0;\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      keys: this.keys.map(_ref9 => {\n        let {\n          pubkey,\n          isSigner,\n          isWritable\n        } = _ref9;\n        return {\n          pubkey: pubkey.toJSON(),\n          isSigner,\n          isWritable\n        };\n      }),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * Transaction class\n */\nclass Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts) {\n    this.signatures = [];\n    this.feePayer = void 0;\n    this.instructions = [];\n    this.recentBlockhash = void 0;\n    this.lastValidBlockHeight = void 0;\n    this.nonceInfo = void 0;\n    this.minNonceContextSlot = void 0;\n    this._message = void 0;\n    this._json = void 0;\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {\n        minContextSlot,\n        nonceInfo\n      } = opts;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {\n        blockhash,\n        lastValidBlockHeight\n      } = opts;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {\n        recentBlockhash,\n        nonceInfo\n      } = opts;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(_ref10 => {\n        let {\n          publicKey\n        } = _ref10;\n        return publicKey.toJSON();\n      })\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add() {\n    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n      items[_key] = arguments[_key];\n    }\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n    let recentBlockhash;\n    let instructions;\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n    let feePayer;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n    const programIds = [];\n    const accountMetas = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({\n          ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(_ref11 => {\n      let {\n        pubkey,\n        isSigner,\n        isWritable\n      } = _ref11;\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions = instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    compiledInstructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners() {\n    for (var _len2 = arguments.length, signers = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      signers[_key2] = arguments[_key2];\n    }\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign() {\n    for (var _len3 = arguments.length, signers = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      signers[_key3] = arguments[_key3];\n    }\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign() {\n    for (var _len4 = arguments.length, signers = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      signers[_key4] = arguments[_key4];\n    }\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message) {\n    const signData = message.serialize();\n    for (var _len5 = arguments.length, signers = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n      signers[_key5 - 1] = arguments[_key5];\n    }\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   */\n  verifySignatures(requireAllSignatures) {\n    return this._verifySignatures(this.serializeMessage(), requireAllSignatures === undefined ? true : requireAllSignatures);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData, requireAllSignatures) {\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n    if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n      throw new Error('Signature verification failed');\n    }\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach((_ref12, index) => {\n      let {\n        signature\n      } = _ref12;\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(message) {\n    let signatures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n}\nclass TransactionMessage {\n  constructor(args) {\n    this.payerKey = void 0;\n    this.instructions = void 0;\n    this.recentBlockhash = void 0;\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n  static decompile(message, args) {\n    const {\n      header,\n      compiledInstructions,\n      recentBlockhash\n    } = message;\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts\n    } = header;\n    const numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n    const numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error('Failed to decompile message because no account keys were found');\n    }\n    const instructions = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys = [];\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(`Failed to find key for account key index ${keyIndex}`);\n        }\n        const isSigner = keyIndex < numRequiredSignatures;\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable = keyIndex - accountKeys.staticAccountKeys.length <\n          // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n          accountKeys.accountKeysFromLookups.writable.length;\n        }\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable\n        });\n      }\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(`Failed to find program id for program id index ${compiledIx.programIdIndex}`);\n      }\n      instructions.push(new TransactionInstruction({\n        programId,\n        data: toBuffer(compiledIx.data),\n        keys\n      }));\n    }\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash\n    });\n  }\n  compileToLegacyMessage() {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions\n    });\n  }\n  compileToV0Message(addressLookupTableAccounts) {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts\n    });\n  }\n}\n\n/**\n * Versioned transaction class\n */\nclass VersionedTransaction {\n  get version() {\n    return this.message.version;\n  }\n  constructor(message, signatures) {\n    this.signatures = void 0;\n    this.message = void 0;\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n  serialize() {\n    const serializedMessage = this.message.serialize();\n    const encodedSignaturesLength = Array();\n    encodeLength(encodedSignaturesLength, this.signatures.length);\n    const transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), BufferLayout.seq(signature(), this.signatures.length, 'signatures'), BufferLayout.blob(serializedMessage.length, 'serializedMessage')]);\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode({\n      encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n      signatures: this.signatures,\n      serializedMessage\n    }, serializedTransaction);\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n  static deserialize(serializedTransaction) {\n    let byteArray = [...serializedTransaction];\n    const signatures = [];\n    const signaturesLength = decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)));\n    }\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n  sign(signers) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(signer.publicKey));\n      assert(signerIndex >= 0, `Cannot sign with non signer key ${signer.publicKey.toBase58()}`);\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n  addSignature(publicKey, signature) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(publicKey));\n    assert(signerIndex >= 0, `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`);\n    this.signatures[signerIndex] = signature;\n  }\n}\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  let status;\n  if (transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null) {\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      signature: signature,\n      blockhash: transaction.recentBlockhash,\n      lastValidBlockHeight: transaction.lastValidBlockHeight\n    }, options && options.commitment)).value;\n  } else if (transaction.minNonceContextSlot != null && transaction.nonceInfo != null) {\n    const {\n      nonceInstruction\n    } = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      minContextSlot: transaction.minNonceContextSlot,\n      nonceAccountPubkey,\n      nonceValue: transaction.nonceInfo.nonce,\n      signature\n    }, options && options.commitment)).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn('sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' + 'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' + 'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.');\n    }\n    status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  }\n  if (status.err) {\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n// zzz\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nfunction decodeData$1(type, buffer) {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\n\n/**\n * NonceAccount class\n */\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n}\nconst encodeDecode = layout => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {\n    decode,\n    encode\n  };\n};\nconst bigInt = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntLE(Buffer.from(src));\n  };\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferLE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n  return bigIntLayout;\n};\nconst u64 = bigInt(8);\n\n/**\n * Create account system transaction params\n */\n\n/**\n * System Instruction class\n */\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return 2 * (\n    // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 +\n    // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length);\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      }));\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      });\n    }\n\n    // success\n    return true;\n  }\n}\nLoader.chunkSize = CHUNK_SIZE;\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\nvar objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var name in obj) {\n    keys.push(name);\n  }\n  return keys;\n};\nfunction stringify(val, isArrayProp) {\n  var i, max, str, keys, key, propVal, toStr;\n  if (val === true) {\n    return \"true\";\n  }\n  if (val === false) {\n    return \"false\";\n  }\n  switch (typeof val) {\n    case \"object\":\n      if (val === null) {\n        return null;\n      } else if (val.toJSON && typeof val.toJSON === \"function\") {\n        return stringify(val.toJSON(), isArrayProp);\n      } else {\n        toStr = objToString.call(val);\n        if (toStr === \"[object Array]\") {\n          str = '[';\n          max = val.length - 1;\n          for (i = 0; i < max; i++) {\n            str += stringify(val[i], true) + ',';\n          }\n          if (max > -1) {\n            str += stringify(val[i], true);\n          }\n          return str + ']';\n        } else if (toStr === \"[object Object]\") {\n          // only object is left\n          keys = objKeys(val).sort();\n          max = keys.length;\n          str = \"\";\n          i = 0;\n          while (i < max) {\n            key = keys[i];\n            propVal = stringify(val[key], false);\n            if (propVal !== undefined) {\n              if (str) {\n                str += ',';\n              }\n              str += JSON.stringify(key) + ':' + propVal;\n            }\n            i++;\n          }\n          return '{' + str + '}';\n        } else {\n          return JSON.stringify(val);\n        }\n      }\n    case \"function\":\n    case \"undefined\":\n      return isArrayProp ? null : undefined;\n    case \"string\":\n      return JSON.stringify(val);\n    default:\n      return isFinite(val) ? val : null;\n  }\n}\nvar fastStableStringify = function (val) {\n  var returnVal = stringify(val, false);\n  if (returnVal !== undefined) {\n    return '' + returnVal;\n  }\n};\nvar fastStableStringify$1 = fastStableStringify;\nconst MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nclass EpochSchedule {\n  /** The maximum number of slots in each epoch */\n\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n\n  /** Indicates whether epochs start short and grow */\n\n  /** The first epoch with `slotsPerEpoch` slots */\n\n  /** The first slot of `firstNormalEpoch` */\n\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    this.slotsPerEpoch = void 0;\n    this.leaderScheduleSlotOffset = void 0;\n    this.warmup = void 0;\n    this.firstNormalEpoch = void 0;\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\nclass SendTransactionError extends Error {\n  constructor(message, logs) {\n    super(message);\n    this.logs = void 0;\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nconst SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\nclass SolanaJSONRPCError extends Error {\n  constructor(_ref13, customMessage) {\n    let {\n      code,\n      message,\n      data\n    } = _ref13;\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = void 0;\n    this.data = void 0;\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\nvar fetchImpl = globalThis.fetch;\nclass RpcWebSocketClient extends RpcWebSocketCommonClient {\n  constructor(address, options, generate_request_id) {\n    const webSocketFactory = url => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket;\n      } else {\n        this.underlyingSocket = rpc;\n      }\n      return rpc;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n    this.underlyingSocket = void 0;\n  }\n  call() {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...arguments);\n    }\n    return Promise.reject(new Error('Tried to call a JSON-RPC method `' + (arguments.length <= 0 ? undefined : arguments[0]) + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n  notify() {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...arguments);\n    }\n    return Promise.reject(new Error('Tried to send a JSON-RPC notification `' + (arguments.length <= 0 ? undefined : arguments[0]) + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n}\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nconst NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nconst DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\n/**\n * @internal\n */\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nfunction decodeData(type, data) {\n  let decoded;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(`invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`);\n  }\n  return decoded;\n}\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\nclass AddressLookupTableAccount {\n  constructor(args) {\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n  isActive() {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n  static deserialize(accountData) {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {\n      addresses\n    } = BufferLayout.struct([BufferLayout.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n      addresses: addresses.map(address => new PublicKey(address))\n    };\n  }\n}\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct([BufferLayout.u32('typeIndex'), u64('deactivationSlot'), BufferLayout.nu64('lastExtendedSlot'), BufferLayout.u8('lastExtendedStartIndex'), BufferLayout.u8(),\n  // option\n  BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), 'authority')])\n};\nconst URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\nfunction makeWebsocketUrl(endpoint) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [_,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  hostish, portWithColon, rest] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  let commitment;\n  let config;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {\n      commitment: specifiedCommitment,\n      ...specifiedConfig\n    } = commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {\n    commitment,\n    config\n  };\n}\n\n/**\n * @internal\n */\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(accountKey => new PublicKey(accountKey)),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data)\n      })),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number(),\n  commission: optional(nullable(number()))\n}))));\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = type({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number()\n});\n\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  })))\n}));\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent;\n  {\n    if (httpAgent != null) {\n      console.warn('You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' + 'It has been ignored; `httpAgent` is only used in Node environments.');\n    }\n  }\n  let fetchWithMiddleware;\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n    };\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n  return clientBrowser;\n}\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n\n/**\n * @internal\n */\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst AddressTableLookupStruct = type({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number())\n});\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct))\n  })\n});\nconst AnnotatedAccountKey = type({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')]))\n});\nconst ConfirmedTransactionAccountsModeResult = type({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string())\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\nconst LoadedAddressesResult = type({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString)\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = type({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number()))\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ParsedConfirmedTransactionResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult,\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * @internal\n */\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n\n/**\n * Filter for log subscriptions.\n */\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${\"0.0.0-development\"}`\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nclass Connection {\n  /** @internal */\n  /** @internal */\n  /** @internal */\n  /** @internal */\n  /** @internal */\n  /** @internal */\n  /** @internal */\n  /** @internal */\n  /** @internal */\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */\n\n  /** @internal */\n  /** @internal */\n  /** @internal */\n\n  /** @internal */\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, commitmentOrConfig) {\n    this._commitment = void 0;\n    this._confirmTransactionInitialTimeout = void 0;\n    this._rpcEndpoint = void 0;\n    this._rpcWsEndpoint = void 0;\n    this._rpcClient = void 0;\n    this._rpcRequest = void 0;\n    this._rpcBatchRequest = void 0;\n    this._rpcWebSocket = void 0;\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketHeartbeat = null;\n    this._rpcWebSocketIdleTimeout = null;\n    this._rpcWebSocketGeneration = 0;\n    this._disableBlockhashCaching = false;\n    this._pollingBlockhash = false;\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    this._nextClientSubscriptionId = 0;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    this._subscriptionHashByClientSubscriptionId = {};\n    this._subscriptionStateChangeCallbacksByHash = {};\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    this._subscriptionsByHash = {};\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment() {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(publicKey, commitmentOrConfig) {\n    /** @internal */\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get balance for ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(publicKey, commitmentOrConfig) {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get block time for slot ${slot}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(config) {\n    let configArg = {};\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(config) {\n    const arg = {\n      ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(publicKey, commitmentOrConfig) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(publicKeys, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(publicKey, commitmentOrConfig, epoch) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get Stake Activation ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const {\n      encoding,\n      ...configWithoutEncoding\n    } = config || {};\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', configWithoutEncoding);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(strategy, commitment) {\n    let rawSignature;\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy;\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    }\n  }\n  getCancellationPromise(signal) {\n    return new Promise((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n  getTransactionConfirmationPromise(_ref14) {\n    let {\n      commitment,\n      signature\n    } = _ref14;\n    let signatureSubscriptionId;\n    let disposeSignatureSubscriptionStateChangeObserver;\n    let done = false;\n    const confirmationPromise = new Promise((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(signature, (result, context) => {\n          signatureSubscriptionId = undefined;\n          const response = {\n            context,\n            value: result\n          };\n          resolve({\n            __type: TransactionStatus.PROCESSED,\n            response\n          });\n        }, commitment);\n        const subscriptionSetupPromise = new Promise(resolveSubscriptionSetup => {\n          if (signatureSubscriptionId == null) {\n            resolveSubscriptionSetup();\n          } else {\n            disposeSignatureSubscriptionStateChangeObserver = this._onSubscriptionStateChange(signatureSubscriptionId, nextState => {\n              if (nextState === 'subscribed') {\n                resolveSubscriptionSetup();\n              }\n            });\n          }\n        });\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {\n            context,\n            value\n          } = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip':\n                {\n                  if (value.confirmationStatus === 'processed') {\n                    return;\n                  }\n                  break;\n                }\n              case 'finalized':\n              case 'max':\n              case 'root':\n                {\n                  if (value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed') {\n                    return;\n                  }\n                  break;\n                }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value\n              }\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {\n      abortConfirmation,\n      confirmationPromise\n    };\n  }\n  async confirmTransactionUsingBlockHeightExceedanceStrategy(_ref15) {\n    let {\n      commitment,\n      strategy: {\n        abortSignal,\n        lastValidBlockHeight,\n        signature\n      }\n    } = _ref15;\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({\n          __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n        });\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingDurableNonceStrategy(_ref16) {\n    let {\n      commitment,\n      strategy: {\n        abortSignal,\n        minContextSlot,\n        nonceAccountPubkey,\n        nonceValue,\n        signature\n      }\n    } = _ref16;\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      let currentNonceValue = nonceValue;\n      let lastCheckedSlot = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {\n            context,\n            value: nonceAccount\n          } = await this.getNonceAndContext(nonceAccountPubkey, {\n            commitment,\n            minContextSlot\n          });\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (status.context.slot < (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {\n            confirmationStatus\n          } = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              (_ => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {\n              err: signatureStatus.value.err\n            }\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingLegacyTimeoutStrategy(_ref17) {\n    let {\n      commitment,\n      signature\n    } = _ref17;\n    let timeoutId;\n    const expiryPromise = new Promise(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip':\n          {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n      }\n      timeoutId = setTimeout(() => resolve({\n        __type: TransactionStatus.TIMED_OUT,\n        timeoutMs\n      }), timeoutMs);\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    let result;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(addresses, epoch, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate() {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(limit) {\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(commitmentOrConfig) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            const {\n              result\n            } = res;\n            return result ? {\n              ...result,\n              transactions: result.transactions.map(_ref18 => {\n                let {\n                  transaction,\n                  meta,\n                  version\n                } = _ref18;\n                return {\n                  meta,\n                  transaction: {\n                    ...transaction,\n                    message: versionedMessageFromResponse(version, transaction.message)\n                  },\n                  version\n                };\n              })\n            } : null;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get confirmed block');\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetParsedBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n    }\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(signature, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(result.version, result.transaction.message)\n      }\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(signature, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(result.version, result.transaction.message)\n        }\n      };\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    const block = {\n      ...result,\n      transactions: result.transactions.map(_ref19 => {\n        let {\n          transaction,\n          meta\n        } = _ref19;\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return {\n      ...block,\n      transactions: block.transactions.map(_ref20 => {\n        let {\n          transaction,\n          meta\n        } = _ref20;\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n    }\n    return res.result;\n  }\n  async getAddressLookupTable(accountKey, config) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(accountKey, config);\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data)\n      });\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(nonceAccount, commitmentOrConfig) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(nonceAccount, commitmentOrConfig) {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `airdrop to ${to.toBase58()} failed`);\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(config) {\n    const {\n      commitment,\n      config: configArg\n    } = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get stake minimum delegation`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(transactionOrMessage, configOrSigners, includeAccounts) {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction = Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n      const config = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        if (!signers) break;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n    if (signers) {\n      config.sigVerify = true;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(transaction, signersOrOptions, options) {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, options);\n    }\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = options && options.preflightCommitment || this.commitment;\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(_ref21 => {\n      let [hash, subscription] = _ref21;\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending'\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _setSubscription(hash, nextSubscription) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onSubscriptionStateChange(clientSubscriptionId, callback) {\n    var _this$_subscriptionSt;\n    const hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (_this$_subscriptionSt = this._subscriptionStateChangeCallbacksByHash)[hash] || (_this$_subscriptionSt[hash] = new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n    await Promise.all(\n    // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n            await this._updateSubscriptions();\n            return;\n          }\n          await (async () => {\n            const {\n              args,\n              method\n            } = subscription;\n            try {\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'subscribing'\n              });\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n              this._setSubscription(hash, {\n                ...subscription,\n                serverSubscriptionId,\n                state: 'subscribed'\n              });\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              if (e instanceof Error) {\n                console.error(`${method} error for argument`, args, e.message);\n              }\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              }\n              // TODO: Maybe add an 'errored' state or a retry limit?\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'pending'\n              });\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId,\n                unsubscribeMethod\n              } = subscription;\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(`${unsubscribeMethod} error:`, e.message);\n                  }\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  }\n                  // TODO: Maybe add an 'errored' state or a retry limit?\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'subscribed'\n                  });\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'unsubscribed'\n              });\n              await this._updateSubscriptions();\n            })();\n          }\n          break;\n      }\n    }));\n  }\n\n  /**\n   * @internal\n   */\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n        // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, AccountNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify$1([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(publicKey, callback, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64');\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, ProgramAccountNotificationResult);\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(programId, callback, commitment, filters) {\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64' /* encoding */, filters ? {\n      filters: filters\n    } : undefined /* extra */);\n\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, LogsNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotUpdateNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n\n  /**\n   * @internal\n   */\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n    }\n  }\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SignatureNotificationResult);\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = {\n      ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n    };\n\n    const args = this._buildArgs([signature], commitment, undefined /* encoding */, extra);\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context);\n        // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n        try {\n          this.removeSignatureListener(clientSubscriptionId);\n          // eslint-disable-next-line no-empty\n        } catch (_err) {\n          // Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, RootNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n}\n\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate() {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(secretKey, options) {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed) {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey() {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nconst LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\nclass AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == index) {\n        type = layoutType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n    }\n    return type;\n  }\n  static decodeCreateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n    const {\n      recentSlot\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot)\n    };\n  }\n  static decodeExtendLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(`invalid instruction; found ${instruction.keys.length} keys, expected at least 2`);\n    }\n    const {\n      addresses\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer))\n    };\n  }\n  static decodeCloseLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey\n    };\n  }\n  static decodeFreezeLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  static decodeDeactivateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\nclass AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static createLookupTable(params) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)], this.programId);\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed\n    });\n    const keys = [{\n      pubkey: lookupTableAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return [new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    }), lookupTableAddress];\n  }\n  static freezeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static extendLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes())\n    });\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (params.payer) {\n      keys.push({\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static deactivateLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static closeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.recipient,\n      isSigner: false,\n      isWritable: true\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n}\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n\n/**\n * Compute Budget Instruction class\n */\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);\n    return {\n      units\n    };\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      microLamports\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);\n    return {\n      microLamports\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitLimit(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitPrice(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports)\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n}\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = function (key) {\n  const h = hmac.create(sha256, key);\n  for (var _len6 = arguments.length, msgs = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    msgs[_key6 - 1] = arguments[_key6];\n  }\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\nconst ecdsaSign = (msgHash, privKey) => secp256k1.signSync(msgHash, privKey, {\n  der: false,\n  recovered: true\n});\nsecp256k1.utils.isValidPrivateKey;\nconst publicKeyCreate = secp256k1.getPublicKey;\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false /* isCompressed */).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n\n/**\n * Stake account authority info\n */\nclass Authorized {\n  /** stake authority */\n\n  /** withdraw authority */\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    this.staker = void 0;\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n/**\n * Stake account lockup info\n */\nclass Lockup {\n  /** Unix timestamp of lockup expiration */\n\n  /** Epoch of lockup expiration */\n\n  /** Lockup custodian authority */\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    this.unixTimestamp = void 0;\n    this.epoch = void 0;\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n}\n\nLockup.default = new Lockup(0, 0, PublicKey.default);\n/**\n * Stake Instruction class\n */\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: 0,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n}\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\nStakeProgram.space = 200;\n\n/**\n * Vote account info\n */\nclass VoteInit {\n  /** [0, 100] */\n\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\n\n/**\n * Vote Instruction class\n */\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType\n      }\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      },\n      votePubkey: instruction.keys[0].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteAuthorizeWithSeedArgs()])\n  }\n});\n\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      }\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: currentAuthorityDerivedKeyBasePubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error('Withdraw will leave vote account with insuffcient funds.');\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\nVoteProgram.space = 3731;\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n\n/**\n * @internal\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n\n/**\n * ValidatorInfo class\n */\nclass ValidatorInfo {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    this.key = void 0;\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(buffer) {\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$1(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n    return null;\n  }\n}\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(),\n// votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(),\n// authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(),\n// epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n}\nfunction parseAuthorizedVoter(_ref22) {\n  let {\n    authorizedVoter,\n    epoch\n  } = _ref22;\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\nfunction parsePriorVoters(_ref23) {\n  let {\n    authorizedPubkey,\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  } = _ref23;\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\nfunction getPriorVoters(_ref24) {\n  let {\n    buf,\n    idx,\n    isEmpty\n  } = _ref24;\n  if (isEmpty) {\n    return [];\n  }\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n\n// eslint-disable-next-line no-redeclare\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n  let confirmationStrategy;\n  let options;\n  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n  if (status.err) {\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n/**\n * There are 1-billion lamports in one SOL\n */\nconst LAMPORTS_PER_SOL = 1000000000;\nexport { Account, AddressLookupTableAccount, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, MessageAccountKeys, MessageV0, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PUBLIC_KEY_LENGTH, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredNonceInvalidError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionMessage, TransactionStatus, VALIDATOR_INFO_KEY, VERSION_PREFIX_MASK, VOTE_PROGRAM_ID, ValidatorInfo, VersionedMessage, VersionedTransaction, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"names":["ed25519","utils","sha512Sync","sha512","concatBytes","arguments","generatePrivateKey","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","sync","isOnCurve","Point","fromHex","sign","message","slice","verify","toBuffer","arr","Buffer","isBuffer","from","buffer","byteOffset","byteLength","Struct","constructor","properties","Object","assign","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","keys","length","Error","map","key","Map","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","value","_bn","undefined","uniquePublicKeyCounter","_Symbol$toStringTag","Symbol","toStringTag","PublicKey","decoded","bs58","BN","unique","equals","eq","toBase58","toBytes","toJSON","buf","b","toArrayLike","zeroPad","alloc","copy","toString","createWithSeed","fromPublicKey","seed","programId","concat","publicKeyBytes","sha256","createProgramAddressSync","seeds","forEach","TypeError","createProgramAddress","findProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddress","pubkeyData","pubkey","default","kind","fields","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","signature","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","push","writable","readonly","get","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","voteAuthorizeWithSeedArgs","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","assert","condition","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","entries","writableSigners","filter","_ref","readonlySigners","_ref2","writableNonSigners","_ref3","readonlyNonSigners","_ref4","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","_ref5","_ref6","_ref7","_ref8","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","state","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","Message","args","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","_","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","signDataLayout","transaction","signData","byteArray","accountCount","i","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","count","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","lookupAccountKeysIndex","numWritableLookupAccountKeys","reduce","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","addressTableLookupLayout","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","_ref9","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","hasOwnProperty","call","minContextSlot","blockhash","nonceInstruction","signers","_ref10","add","_len","items","_key","compileMessage","JSON","stringify","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","x","sort","y","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","_ref11","indexOf","_compile","valid","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","_len2","_key2","seen","Set","_len3","_key3","uniqueSigners","signer","_partialSign","partialSign","_len4","_key4","_len5","_key5","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_verifySignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","_ref12","keyObj","populate","sigPubkeyPair","some","TransactionMessage","decompile","compiledIx","compileToLegacyMessage","compileToV0Message","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","options","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData$1","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","encodeDecode","bigInt","bigIntLayout","src","toBigIntLE","toBufferLE","u64","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","createAccount","params","transfer","BigInt","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","objToString","objKeys","obj","name","val","isArrayProp","max","propVal","toStr","isFinite","fastStableStringify","returnVal","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","_ref13","customMessage","code","fetchImpl","globalThis","fetch","RpcWebSocketClient","RpcWebSocketCommonClient","generate_request_id","webSocketFactory","url","rpc","createRpc","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","readyState","reject","notify","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","LOOKUP_TABLE_META_SIZE","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","makeWebsocketUrl","endpoint","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","websocketPort","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","assertEndpointUrl","putativeUrl","test","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","result","union","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","context","number","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","commission","GetInflationRateResult","total","validator","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","httpAgent","agent","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","clientBrowser","RpcClient","request","callback","method","body","headers","COMMON_HTTP_HEADERS","too_many_requests_retries","res","waitTime","log","statusText","text","ok","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","wsEndpoint","confirmTransactionInitialTimeout","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","_buildArgs","unsafeRes","getBalance","then","catch","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","encoding","configWithoutEncoding","getParsedProgramAccounts","strategy","rawSignature","aborted","reason","decodedSignature","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","_ref14","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","done","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","abortConfirmation","removeSignatureListener","_ref15","expiryPromise","checkBlockHeight","getBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","_ref16","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","commitmentForStatus","_ref17","timeoutId","timeoutMs","TIMED_OUT","clearTimeout","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getInflationRate","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","transactionDetails","_ref18","getParsedBlock","getBlockProduction","extra","c","getTransaction","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","_ref19","_ref20","getBlocks","endSlot","getBlockSignatures","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","versionedTx","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","join","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","Number","MAX_SAFE_INTEGER","clearInterval","_ref21","hash","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","cb","clientSubscriptionId","_this$_subscriptionSt","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","fastStableStringify$1","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","decodeCreateLookupTable","checkKeysLength","recentSlot","decodeExtendLookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","units","additionalFee","RequestUnits","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","PRIVATE_KEY_BYTES$1","PUBLIC_KEY_BYTES$1","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","secp256k1","hmacSha256Sync","h","hmac","_len6","msgs","_key6","msg","update","digest","ecdsaSign","msgHash","privKey","signSync","der","recovered","isValidPrivateKey","publicKeyCreate","PRIVATE_KEY_BYTES","ETHEREUM_ADDRESS_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","splitWithSeed","merge","withdraw","deactivate","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","currentAuthorityDerivedKeyBasePubkey","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assert$1","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","_ref22","parsePriorVoters","_ref23","epochOfLastAuthorizedSwitch","targetEpoch","_ref24","idx","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL"],"sources":["D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\utils\\ed25519.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\utils\\to-buffer.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\utils\\borsh-schema.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\publickey.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\account.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\bpf-loader-deprecated.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\transaction\\constants.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\transaction\\expiry-custom-errors.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\message\\account-keys.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\layout.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\utils\\shortvec-encoding.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\utils\\assert.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\message\\compiled-keys.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\message\\legacy.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\message\\v0.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\message\\versioned.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\transaction\\legacy.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\transaction\\message.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\transaction\\versioned.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\sysvar.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\utils\\send-and-confirm-transaction.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\utils\\sleep.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\instruction.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\fee-calculator.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\nonce-account.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\utils\\bigint.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\programs\\system.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\loader.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\bpf-loader.ts","D:\\skella\\site2\\node_modules\\node_modules\\.pnpm\\fast-stable-stringify@1.0.0\\node_modules\\fast-stable-stringify\\index.js","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\epoch-schedule.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\errors.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\__forks__\\browser\\fetch-impl.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\rpc-websocket.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\timing.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\account-data.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\programs\\address-lookup-table\\state.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\utils\\makeWebsocketUrl.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\connection.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\keypair.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\programs\\address-lookup-table\\index.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\programs\\compute-budget.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\programs\\ed25519.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\utils\\secp256k1.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\programs\\secp256k1.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\programs\\stake.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\programs\\vote.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\validator-info.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\vote-account.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\utils\\cluster.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\utils\\send-and-confirm-raw-transaction.ts","D:\\skella\\site2\\node_modules\\@solana\\web3.js\\src\\index.ts"],"sourcesContent":["import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length -\n      numRequiredSignatures -\n      numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, options);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n  DurableNonceTransactionConfirmationStrategy,\n  TransactionConfirmationStrategy,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: TransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | TransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy: TransactionConfirmationStrategy | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'nonceValue',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as DurableNonceTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
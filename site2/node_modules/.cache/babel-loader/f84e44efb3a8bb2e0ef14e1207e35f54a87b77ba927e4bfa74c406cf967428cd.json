{"ast":null,"code":"var _jsxFileName = \"D:\\\\skella\\\\site2\\\\src\\\\components\\\\qrCode.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useMemo } from \"react\";\nimport { createQR, encodeURL, findReference, validateTransfer, FindReferenceError, ValidateTransferError } from \"@solana/pay\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport { clusterApiUrl, Connection, Keypair, PublicKey } from \"@solana/web3.js\";\nimport BigNumber from \"bignumber.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function QrCode() {\n  _s();\n  const [inputAmount, setInputAmount] = useState(0);\n  const [payments, setPayments] = useState(false);\n  const qrRef = useRef(null);\n  const shopAddress = new PublicKey(\"3iZKfdQUfvMpGWot6dUg3iytGLhsh2Jd7tThqDKLKEB2\");\n  const reference = useMemo(() => Keypair.generate().publicKey, []);\n  const amount = BigNumber(inputAmount);\n  const network = WalletAdapterNetwork.Devnet;\n  const endpoint = clusterApiUrl(network);\n  const connection = new Connection(endpoint);\n  const url = encodeURL({\n    recipient: shopAddress,\n    amount,\n    reference,\n    label: \"Cookies Inc\",\n    message: \"Thanks for your order! 🍪\"\n  });\n\n  // Show the QR code\n  useEffect(() => {\n    const qr = createQR(url, 512, \"transparent\");\n    if (qrRef.current && amount.isGreaterThan(0)) {\n      qrRef.current.innerHTML = \"\";\n      qr.append(qrRef.current);\n    }\n  });\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      try {\n        const signatureInfo = await findReference(connection, reference, {\n          finality: \"confirmed\"\n        });\n        const result = await connection.confirmTransaction({\n          signature: signatureInfo.signature\n        }, 'finalized');\n        setPayments(true);\n\n        // router.push(\"/shop/confirmed\");\n      } catch (e) {\n        if (e instanceof FindReferenceError) {\n          return;\n        }\n        if (e instanceof ValidateTransferError) {\n          console.error(\"Transaction is invalid\", e);\n          return;\n        }\n        console.error(\"Unknown error\", e);\n      }\n    }, 500);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [amount]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center gap-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inputAmount,\n      onChange: e => setInputAmount(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Checkout: \", inputAmount, \"Sol\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), payments ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Payment successful\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: qrRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 55\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n}\n_s(QrCode, \"fEMFb7ipLPUqEHdSvGDTPQqP71w=\");\n_c = QrCode;\nexport default QrCode;\nvar _c;\n$RefreshReg$(_c, \"QrCode\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useMemo","createQR","encodeURL","findReference","validateTransfer","FindReferenceError","ValidateTransferError","WalletAdapterNetwork","clusterApiUrl","Connection","Keypair","PublicKey","BigNumber","jsxDEV","_jsxDEV","QrCode","_s","inputAmount","setInputAmount","payments","setPayments","qrRef","shopAddress","reference","generate","publicKey","amount","network","Devnet","endpoint","connection","url","recipient","label","message","qr","current","isGreaterThan","innerHTML","append","interval","setInterval","signatureInfo","finality","result","confirmTransaction","signature","e","console","error","clearInterval","className","children","type","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["D:/skella/site2/src/components/qrCode.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect, useMemo } from \"react\";\r\nimport {\r\n    createQR,\r\n    encodeURL,\r\n    findReference,\r\n    validateTransfer,\r\n    FindReferenceError,\r\n    ValidateTransferError,\r\n} from \"@solana/pay\";\r\n\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport { clusterApiUrl, Connection, Keypair, PublicKey } from \"@solana/web3.js\";\r\nimport BigNumber from \"bignumber.js\";\r\n\r\nexport function QrCode() {\r\n\r\n    const [inputAmount, setInputAmount] = useState(0);\r\n    const [payments, setPayments] = useState(false)\r\n\r\n    const qrRef = useRef(null);\r\n    const shopAddress = new PublicKey(\"3iZKfdQUfvMpGWot6dUg3iytGLhsh2Jd7tThqDKLKEB2\");\r\n\r\n    const reference = useMemo(() => Keypair.generate().publicKey, []);\r\n    const amount = BigNumber(inputAmount);\r\n\r\n    \r\n    const network = WalletAdapterNetwork.Devnet;\r\n    const endpoint = clusterApiUrl(network);\r\n    const connection = new Connection(endpoint);\r\n\r\n    const url = encodeURL({\r\n        recipient: shopAddress,\r\n        amount,\r\n        reference,\r\n        label: \"Cookies Inc\",\r\n        message: \"Thanks for your order! 🍪\",\r\n    });\r\n\r\n\r\n    // Show the QR code\r\n    useEffect(() => {\r\n        const qr = createQR(url, 512, \"transparent\");\r\n\r\n        if (qrRef.current && amount.isGreaterThan(0)) {\r\n            qrRef.current.innerHTML = \"\";\r\n            qr.append(qrRef.current);\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        const interval = setInterval(async () => {\r\n\r\n            try {\r\n                const signatureInfo = await findReference(connection, reference, {\r\n                    finality: \"confirmed\",\r\n                });\r\n\r\n                const result = await connection.confirmTransaction({\r\n                    signature: signatureInfo.signature,\r\n                },\r\n                'finalized');\r\n                \r\n                setPayments(true);\r\n                \r\n                // router.push(\"/shop/confirmed\");\r\n\r\n            } catch (e) {\r\n\r\n                if (e instanceof FindReferenceError) {\r\n                    return;\r\n                }\r\n\r\n                if (e instanceof ValidateTransferError) {\r\n                    console.error(\"Transaction is invalid\", e);\r\n                    return;\r\n                }\r\n\r\n                console.error(\"Unknown error\", e);\r\n            }\r\n\r\n        }, 500);\r\n\r\n        return () => {\r\n            clearInterval(interval);\r\n        };\r\n\r\n    }, [amount]);\r\n\r\n\r\n    return (\r\n        \r\n        <div className=\"flex flex-col items-center gap-8\">\r\n            <input\r\n                type=\"text\"\r\n                value={inputAmount}\r\n                onChange={(e) => setInputAmount(e.target.value)}\r\n            />\r\n            <p>Checkout: {inputAmount}Sol</p>\r\n            {payments ? <h1>Payment successful</h1> : <div ref={qrRef} />}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QrCode;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AACnE,SACIC,QAAQ,EACRC,SAAS,EACTC,aAAa,EACbC,gBAAgB,EAChBC,kBAAkB,EAClBC,qBAAqB,QAClB,aAAa;AAEpB,SAASC,oBAAoB,QAAQ,6BAA6B;AAClE,SAASC,aAAa,EAAEC,UAAU,EAAEC,OAAO,EAAEC,SAAS,QAAQ,iBAAiB;AAC/E,OAAOC,SAAS,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,OAAO,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAErB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACsB,QAAQ,EAAEC,WAAW,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAMwB,KAAK,GAAGvB,MAAM,CAAC,IAAI,CAAC;EAC1B,MAAMwB,WAAW,GAAG,IAAIX,SAAS,CAAC,8CAA8C,CAAC;EAEjF,MAAMY,SAAS,GAAGvB,OAAO,CAAC,MAAMU,OAAO,CAACc,QAAQ,EAAE,CAACC,SAAS,EAAE,EAAE,CAAC;EACjE,MAAMC,MAAM,GAAGd,SAAS,CAACK,WAAW,CAAC;EAGrC,MAAMU,OAAO,GAAGpB,oBAAoB,CAACqB,MAAM;EAC3C,MAAMC,QAAQ,GAAGrB,aAAa,CAACmB,OAAO,CAAC;EACvC,MAAMG,UAAU,GAAG,IAAIrB,UAAU,CAACoB,QAAQ,CAAC;EAE3C,MAAME,GAAG,GAAG7B,SAAS,CAAC;IAClB8B,SAAS,EAAEV,WAAW;IACtBI,MAAM;IACNH,SAAS;IACTU,KAAK,EAAE,aAAa;IACpBC,OAAO,EAAE;EACb,CAAC,CAAC;;EAGF;EACAnC,SAAS,CAAC,MAAM;IACZ,MAAMoC,EAAE,GAAGlC,QAAQ,CAAC8B,GAAG,EAAE,GAAG,EAAE,aAAa,CAAC;IAE5C,IAAIV,KAAK,CAACe,OAAO,IAAIV,MAAM,CAACW,aAAa,CAAC,CAAC,CAAC,EAAE;MAC1ChB,KAAK,CAACe,OAAO,CAACE,SAAS,GAAG,EAAE;MAC5BH,EAAE,CAACI,MAAM,CAAClB,KAAK,CAACe,OAAO,CAAC;IAC5B;EACJ,CAAC,CAAC;EAEFrC,SAAS,CAAC,MAAM;IAEZ,MAAMyC,QAAQ,GAAGC,WAAW,CAAC,YAAY;MAErC,IAAI;QACA,MAAMC,aAAa,GAAG,MAAMvC,aAAa,CAAC2B,UAAU,EAAEP,SAAS,EAAE;UAC7DoB,QAAQ,EAAE;QACd,CAAC,CAAC;QAEF,MAAMC,MAAM,GAAG,MAAMd,UAAU,CAACe,kBAAkB,CAAC;UAC/CC,SAAS,EAAEJ,aAAa,CAACI;QAC7B,CAAC,EACD,WAAW,CAAC;QAEZ1B,WAAW,CAAC,IAAI,CAAC;;QAEjB;MAEJ,CAAC,CAAC,OAAO2B,CAAC,EAAE;QAER,IAAIA,CAAC,YAAY1C,kBAAkB,EAAE;UACjC;QACJ;QAEA,IAAI0C,CAAC,YAAYzC,qBAAqB,EAAE;UACpC0C,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEF,CAAC,CAAC;UAC1C;QACJ;QAEAC,OAAO,CAACC,KAAK,CAAC,eAAe,EAAEF,CAAC,CAAC;MACrC;IAEJ,CAAC,EAAE,GAAG,CAAC;IAEP,OAAO,MAAM;MACTG,aAAa,CAACV,QAAQ,CAAC;IAC3B,CAAC;EAEL,CAAC,EAAE,CAACd,MAAM,CAAC,CAAC;EAGZ,oBAEIZ,OAAA;IAAKqC,SAAS,EAAC,kCAAkC;IAAAC,QAAA,gBAC7CtC,OAAA;MACIuC,IAAI,EAAC,MAAM;MACXC,KAAK,EAAErC,WAAY;MACnBsC,QAAQ,EAAGR,CAAC,IAAK7B,cAAc,CAAC6B,CAAC,CAACS,MAAM,CAACF,KAAK;IAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAClD,eACF9C,OAAA;MAAAsC,QAAA,GAAG,YAAU,EAACnC,WAAW,EAAC,KAAG;IAAA;MAAAwC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,EAChCzC,QAAQ,gBAAGL,OAAA;MAAAsC,QAAA,EAAI;IAAkB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,gBAAG9C,OAAA;MAAK+C,GAAG,EAAExC;IAAM;MAAAoC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC3D;AAEd;AAAC5C,EAAA,CAxFeD,MAAM;AAAA+C,EAAA,GAAN/C,MAAM;AA0FtB,eAAeA,MAAM;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
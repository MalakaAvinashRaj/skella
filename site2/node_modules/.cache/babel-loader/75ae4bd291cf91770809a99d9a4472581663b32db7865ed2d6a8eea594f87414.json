{"ast":null,"code":"var _jsxFileName = \"D:\\\\skella\\\\site2\\\\src\\\\components\\\\phantom.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Connection, Transaction, SystemProgram, PublicKey, clusterApiUrl, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport './phantom.css';\nimport * as buffer from \"buffer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Phantom() {\n  _s();\n  const [wallet, setWallet] = useState(null);\n  const [amount, setAmount] = useState(0);\n  const [connected, setConnected] = useState(false);\n  const [walletBalance, setWalletBalance] = useState(0);\n  const [signStatus, setSignStatus] = useState('');\n  const [count, setCount] = useState(0);\n  const [key, setKey] = useState(null);\n  const [logs, setLogs] = useState([]);\n  const MAX_POLLS = 60;\n  const POLLING_INTERVAL = 1000;\n  const network = clusterApiUrl('devnet');\n  const connection = new Connection(network, 'confirmed');\n  window.Buffer = buffer.Buffer;\n  const destPubkeyStr = 'B1MEySUG5zs3zMC5BEfi8w5p7r6tVDgc93xQynkTw2z3';\n\n  //------------------------- Logs ------------------------------//\n\n  function addLog(log) {\n    setLogs(logs => [...logs, log]);\n  }\n\n  //------------------------- Provider ------------------------------//\n\n  const getProvider = async () => {\n    if ('phantom' in window) {\n      var _window$phantom;\n      const provider = await ((_window$phantom = window.phantom) === null || _window$phantom === void 0 ? void 0 : _window$phantom.Connectionsolana);\n      if (provider !== null && provider !== void 0 && provider.isPhantom) {\n        return provider;\n      } else {\n        return;\n      }\n    }\n  };\n  const provider = getProvider();\n\n  //-------------------------- Connect & Disconnect -----------------------------//\n\n  const connectWallet = async () => {\n    try {\n      var _window$phantom2;\n      if ((_window$phantom2 = window.phantom) !== null && _window$phantom2 !== void 0 && _window$phantom2.solana.isPhantom) {\n        const resp = await window.solana.connect();\n        setConnected(!connected);\n        setWallet(resp.publicKey.toString());\n        setKey(resp);\n      }\n    } catch (err) {\n      console.log(err);\n      console.log('error at connect wallet');\n    }\n  };\n  const disconectWallet = async () => {\n    try {\n      await window.solana.disconnect();\n      setConnected(!connected);\n    } catch (err) {\n      console.error(err);\n      console.log('Error at wallet disconnect');\n    }\n    console.log(connected);\n  };\n\n  //-------------------------- Transaction 1 -----------------------------//\n\n  async function signInTransactionAndSendMoney() {\n    const lamports = amount * 10 ^ 9;\n    try {\n      console.log(\"starting sendMoney\");\n      console.log(lamports);\n      const destPubkey = new PublicKey(destPubkeyStr);\n      const walletAccountInfo = await connection.getAccountInfo(key.publicKey);\n      console.log(\"wallet data size\", walletAccountInfo === null || walletAccountInfo === void 0 ? void 0 : walletAccountInfo.data.length);\n      const receiverAccountInfo = await connection.getAccountInfo(destPubkey);\n      console.log(\"receiver data size\", receiverAccountInfo === null || receiverAccountInfo === void 0 ? void 0 : receiverAccountInfo.data.length);\n      const instruction = SystemProgram.transfer({\n        fromPubkey: key.publicKey,\n        toPubkey: destPubkey,\n        lamports\n      });\n      let trans = await setWalletTransaction(instruction, connection);\n      let signature = await signAndSendTransaction(key, trans, connection);\n      let result = await connection.confirmTransaction(signature, \"singleGossip\");\n      console.log(\"money sent\", result);\n    } catch (e) {\n      console.error(\"Failed\", e);\n    }\n  }\n  async function setWalletTransaction(instruction, connection) {\n    const transaction = new Transaction();\n    transaction.add(instruction);\n    transaction.feePayer = key.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    return transaction;\n  }\n  async function signAndSendTransaction(key, transaction, connection) {\n    const {\n      signature\n    } = await window.solana.signAndSendTransaction(transaction);\n    await connection.confirmTransaction(signature);\n    console.log(\"sign transaction\");\n    console.log(\"send raw transaction\");\n    return signature;\n  }\n\n  //------------------------- Transaction 0 ------------------------------//\n\n  const handleSend = async () => {\n    try {\n      const transaction = new Transaction().add(SystemProgram.transfer({\n        fromPubkey: key,\n        toPubkey: key,\n        lamports: amount * 10 ^ 9\n      }));\n      addLog('Getting recent blockhash');\n      transaction.recentBlockhash = await connection.getLatestBlockhash('finalized').blockhash;\n      transaction.feePayer = key;\n      addLog('Sending signature request to wallet');\n      const signedTransaction = await window.solana.signTransaction(transaction);\n      addLog('Got signature, submitting transaction');\n      const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n      addLog('Submitted transaction ' + signature + ', awaiting confirmation');\n      await connection.confirmedTransaction(signature, 'singleGossip');\n      addLog('Transaction ' + signature + ' confirmed');\n    } catch (e) {\n      console.error(e);\n      addLog(`Error: ${e.message}`);\n    }\n  };\n\n  //------------------------- Connect Button ------------------------------//\n\n  const handleConnectButton = async () => {\n    if (connected) {\n      try {\n        console.log(`handle Disconnect`);\n        disconectWallet();\n        setWallet(null);\n      } catch (e) {\n        console.log(e);\n        console.log(`error at handle Disonnect`);\n      }\n      console.log(connected);\n    } else {\n      try {\n        console.log(`handle Connect`);\n        await connectWallet();\n      } catch (e) {\n        console.log(e);\n        console.log(`error at handle Connect`);\n      }\n      console.log(`Connected with Public Key: ${wallet}`);\n      console.log(wallet);\n    }\n  };\n\n  //-------------------------- Wallet Button -----------------------------//\n\n  const returnWallet = async () => {\n    console.log(`wallet: ${wallet}`);\n    console.log(`key: ${key}`);\n  };\n\n  //-------------------------- HTML -----------------------------//\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"phantom\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Phantom wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: handleConnectButton,\n        children: connected ? \"Disconnect\" : \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"buttons\",\n        onChange: event => setAmount(event.target.value),\n        type: \"text\",\n        value: amount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: signInTransactionAndSendMoney,\n        disabled: !connected,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: returnWallet,\n        disabled: !connected,\n        children: \"Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), wallet === null ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Wallet not connected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 26\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"connected to \", wallet.substring(0, 4) + \"....\" + wallet.substr(wallet.length - 4, wallet.length)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 56\n    }, this), signStatus === \"success\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Transaction Successfull\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 35\n    }, this) : null, signStatus === \"waiting\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Waiting for conformation...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 35\n    }, this) : null, signStatus === \"failed\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Transaction Failed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 34\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n}\n_s(Phantom, \"KDZuBb3Qjjmgwwuvgy6BZVt3pTw=\");\n_c = Phantom;\nexport default Phantom;\nvar _c;\n$RefreshReg$(_c, \"Phantom\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Connection","Transaction","SystemProgram","PublicKey","clusterApiUrl","LAMPORTS_PER_SOL","buffer","jsxDEV","_jsxDEV","Phantom","_s","wallet","setWallet","amount","setAmount","connected","setConnected","walletBalance","setWalletBalance","signStatus","setSignStatus","count","setCount","key","setKey","logs","setLogs","MAX_POLLS","POLLING_INTERVAL","network","connection","window","Buffer","destPubkeyStr","addLog","log","getProvider","_window$phantom","provider","phantom","Connectionsolana","isPhantom","connectWallet","_window$phantom2","solana","resp","connect","publicKey","toString","err","console","disconectWallet","disconnect","error","signInTransactionAndSendMoney","lamports","destPubkey","walletAccountInfo","getAccountInfo","data","length","receiverAccountInfo","instruction","transfer","fromPubkey","toPubkey","trans","setWalletTransaction","signature","signAndSendTransaction","result","confirmTransaction","e","transaction","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","handleSend","getLatestBlockhash","signedTransaction","signTransaction","sendRawTransaction","serialize","confirmedTransaction","message","handleConnectButton","returnWallet","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","event","target","value","type","disabled","substring","substr","_c","$RefreshReg$"],"sources":["D:/skella/site2/src/components/phantom.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { Connection, Transaction, SystemProgram, PublicKey, clusterApiUrl, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\r\nimport './phantom.css';\r\nimport * as buffer from \"buffer\";\r\n\r\nexport function Phantom() {\r\n\r\n  const [wallet, setWallet] = useState(null);\r\n  const [amount, setAmount] = useState(0);\r\n  const [connected, setConnected] = useState(false);\r\n  const [walletBalance, setWalletBalance] = useState(0);\r\n  const [signStatus, setSignStatus] = useState('');\r\n  const [count, setCount] = useState(0);\r\n  const [key, setKey] = useState(null);\r\n  const [logs, setLogs] = useState([]);\r\n\r\n  const MAX_POLLS = 60;\r\n  const POLLING_INTERVAL = 1000;\r\n\r\n  const network = clusterApiUrl('devnet');\r\n  const connection = new Connection(network, 'confirmed');\r\n\r\n  window.Buffer = buffer.Buffer;\r\n  const destPubkeyStr = 'B1MEySUG5zs3zMC5BEfi8w5p7r6tVDgc93xQynkTw2z3'\r\n\r\n  //------------------------- Logs ------------------------------//\r\n\r\n  function addLog(log) {\r\n    setLogs((logs) => [...logs, log]);\r\n  }\r\n\r\n  //------------------------- Provider ------------------------------//\r\n\r\n  const getProvider = async () => {\r\n\r\n    if ('phantom' in window) {\r\n      const provider = await window.phantom?.Connectionsolana;\r\n\r\n      if (provider?.isPhantom) {\r\n        return provider;\r\n      }\r\n      else {\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  const provider = getProvider();\r\n\r\n  //-------------------------- Connect & Disconnect -----------------------------//\r\n\r\n  const connectWallet = async () => {\r\n    try {\r\n      if (window.phantom?.solana.isPhantom) {\r\n        const resp = await window.solana.connect();\r\n        setConnected(!connected);\r\n        setWallet(resp.publicKey.toString());\r\n        setKey(resp)\r\n      }\r\n    }\r\n    catch (err) {\r\n      console.log(err);\r\n      console.log('error at connect wallet');\r\n    }\r\n  };\r\n\r\n  const disconectWallet = async () => {\r\n    try {\r\n      await window.solana.disconnect();\r\n      setConnected(!connected);\r\n    }\r\n    catch (err) {\r\n      console.error(err);\r\n      console.log('Error at wallet disconnect');\r\n    }\r\n    console.log(connected);\r\n  }\r\n\r\n  //-------------------------- Transaction 1 -----------------------------//\r\n\r\n  async function signInTransactionAndSendMoney() {\r\n\r\n    const lamports = amount * 10 ^ 9;\r\n\r\n    try {\r\n\r\n      console.log(\"starting sendMoney\");\r\n      console.log(lamports);\r\n      const destPubkey = new PublicKey(destPubkeyStr);\r\n\r\n      const walletAccountInfo = await connection.getAccountInfo(key.publicKey);\r\n      console.log(\"wallet data size\", walletAccountInfo?.data.length);\r\n\r\n      const receiverAccountInfo = await connection.getAccountInfo(destPubkey);\r\n      console.log(\"receiver data size\", receiverAccountInfo?.data.length);\r\n\r\n      const instruction = SystemProgram.transfer({\r\n        fromPubkey: key.publicKey,\r\n        toPubkey: destPubkey,\r\n        lamports,\r\n      });\r\n\r\n      let trans = await setWalletTransaction(instruction, connection);\r\n      let signature = await signAndSendTransaction(key, trans, connection);\r\n      let result = await connection.confirmTransaction(signature, \"singleGossip\");\r\n\r\n      console.log(\"money sent\", result);\r\n\r\n    }\r\n    catch (e) {\r\n      console.error(\"Failed\", e);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  async function setWalletTransaction(instruction, connection) {\r\n\r\n    const transaction = new Transaction();\r\n\r\n    transaction.add(instruction);\r\n    transaction.feePayer = key.publicKey;\r\n\r\n    let hash = await connection.getRecentBlockhash();\r\n    console.log(\"blockhash\", hash);\r\n\r\n    transaction.recentBlockhash = hash.blockhash;\r\n    return transaction;\r\n\r\n  }\r\n\r\n  async function signAndSendTransaction(key, transaction, connection) {\r\n\r\n    const { signature } = await window.solana.signAndSendTransaction(transaction);\r\n    await connection.confirmTransaction(signature);\r\n\r\n    console.log(\"sign transaction\");\r\n    console.log(\"send raw transaction\");\r\n    return signature;\r\n\r\n  }\r\n\r\n  //------------------------- Transaction 0 ------------------------------//\r\n\r\n\r\n  const handleSend = async () => {\r\n\r\n    try {\r\n\r\n      const transaction = new Transaction().add(\r\n        SystemProgram.transfer({\r\n          fromPubkey: key,\r\n          toPubkey: key,\r\n          lamports: amount * 10 ^ 9,\r\n        }),\r\n      );\r\n\r\n      addLog('Getting recent blockhash');\r\n      transaction.recentBlockhash = await connection.getLatestBlockhash('finalized').blockhash;\r\n      transaction.feePayer = key;\r\n\r\n      addLog('Sending signature request to wallet');\r\n      const signedTransaction = await window.solana.signTransaction(transaction);\r\n      addLog('Got signature, submitting transaction');\r\n\r\n      const signature = await connection.sendRawTransaction(signedTransaction.serialize());\r\n      addLog('Submitted transaction ' + signature + ', awaiting confirmation');\r\n\r\n      await connection.confirmedTransaction(signature, 'singleGossip');\r\n      addLog('Transaction ' + signature + ' confirmed');\r\n\r\n    }\r\n    catch (e) {\r\n      console.error(e);\r\n      addLog(`Error: ${e.message}`);\r\n    }\r\n  }\r\n\r\n  //------------------------- Connect Button ------------------------------//\r\n\r\n\r\n  const handleConnectButton = async () => {\r\n    if (connected) {\r\n      try {\r\n        console.log(`handle Disconnect`);\r\n        disconectWallet();\r\n        setWallet(null);\r\n      }\r\n      catch (e) {\r\n        console.log(e);\r\n        console.log(`error at handle Disonnect`);\r\n      }\r\n      console.log(connected);\r\n    }\r\n    else {\r\n      try {\r\n        console.log(`handle Connect`);\r\n        await connectWallet()\r\n      }\r\n      catch (e) {\r\n        console.log(e);\r\n        console.log(`error at handle Connect`);\r\n      }\r\n      console.log(`Connected with Public Key: ${wallet}`)\r\n      console.log(wallet);\r\n    }\r\n  }\r\n\r\n  //-------------------------- Wallet Button -----------------------------//\r\n\r\n  const returnWallet = async () => {\r\n    console.log(`wallet: ${wallet}`);\r\n    console.log(`key: ${key}`);\r\n  }\r\n\r\n  //-------------------------- HTML -----------------------------//\r\n\r\n\r\n  return (\r\n    <div className=\"phantom\">\r\n\r\n      <h3>Phantom wallet</h3>\r\n\r\n      <div>\r\n        <button className=\"buttons\" onClick={handleConnectButton}>{connected ? \"Disconnect\" : \"Connect\"}</button>\r\n        <input className=\"buttons\" onChange={(event) => setAmount(event.target.value)} type=\"text\" value={amount} />\r\n        <button className=\"buttons\" onClick={signInTransactionAndSendMoney} disabled={!connected} >Send</button>\r\n        <button className=\"buttons\" onClick={returnWallet} disabled={!connected} >Wallet</button>\r\n      </div>\r\n\r\n      {wallet === null ? <p>Wallet not connected</p> : <p>connected to {wallet.substring(0, 4) + \"....\" + wallet.substr(wallet.length - 4, wallet.length)}</p>}\r\n      {signStatus === \"success\" ? <p>Transaction Successfull</p> : null}\r\n      {signStatus === \"waiting\" ? <p>Waiting for conformation...</p> : null}\r\n      {signStatus === \"failed\" ? <p>Transaction Failed</p> : null}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Phantom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
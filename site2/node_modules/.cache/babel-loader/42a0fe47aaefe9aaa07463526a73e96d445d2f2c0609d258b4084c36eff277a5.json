{"ast":null,"code":"var _jsxFileName = \"D:\\\\skella\\\\site2\\\\src\\\\components\\\\phantom.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Connection, PublicKey, Transaction, SystemProgram, clusterApiUrl } from \"@solana/web3.js\";\nimport './phantom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Phantom() {\n  _s();\n  const [wallet, setWallet] = useState(null);\n  const [amount, setAmount] = useState(0);\n  const [status, setStatus] = useState('notConnected');\n  const [connected, setConnected] = useState(false);\n  const [walletBalance, setWalletBalance] = useState(0);\n  const network = clusterApiUrl('devnet');\n  const connection = new Connection(network, 'confirmed');\n  const message = 'Please sign and validate your assets';\n  const getProvider = () => {\n    if ('phantom' in window) {\n      var _window$phantom;\n      const provider = (_window$phantom = window.phantom) === null || _window$phantom === void 0 ? void 0 : _window$phantom.solana;\n      if (provider !== null && provider !== void 0 && provider.isPhantom) {\n        return provider;\n      }\n    }\n    console.log('Phantom not found');\n  };\n  const provider = getProvider();\n  const getBalance = async () => {\n    if (!provider) return;\n    setWalletBalance(await connection.getBalance(provider.publicKey));\n  };\n  const handleSignAndSendTransaction = async () => {\n    if (!provider) return;\n    getBalance();\n    if (walletBalance < amount) return console.log('Insufficient funds');\n    try {\n      const transaction = await createTransferTransaction(provider.publicKey, connection);\n      const signature = await signAndSendTransaction(provider, transaction);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const createTransferTransaction = async (publicKey, connection) => {\n    const transaction = new Transaction().add(SystemProgram.transfer({\n      fromPubkeys: publicKey,\n      toPubkeys: publicKey,\n      lamports: amount * Math.pow(10, 9)\n    }));\n    return transaction;\n  };\n  const signAndSendTransaction = async (provider, transaction) => {};\n  const connectWallet = async () => {\n    try {\n      const resp = await provider.connect();\n      setStatus('connected');\n      return resp.publicKey.toString();\n    } catch (err) {\n      console.log('User rejected the request.');\n    }\n  };\n  const handleConnect = async () => {\n    try {\n      const wallet = await connectWallet().then(setWallet(wallet)).then(setConnected(true)).then(console.log(`Connected with Public Key: ${wallet}`));\n    } catch (e) {\n      console.log(`Error connecting`);\n      console.log(e);\n    }\n  };\n  const handleDisconnect = async () => {\n    try {\n      await provider.disconnect().then(setWallet(null)).then(setConnected(false)).then(console.log(`Disonnected wallet`));\n    } catch (e) {\n      console.log(`Error Disconnecting`);\n      console.log(e);\n    }\n  };\n  const handleSend = async () => {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"phantom\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Phantom wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: connected ? handleDisconnect : handleConnect,\n        children: connected ? \"Disconnect\" : \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"buttons\",\n        onChange: event => setAmount(event.target.value),\n        type: \"text\",\n        value: amount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttons\",\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), wallet === null ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Wallet not connected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"connected to \", wallet.substring(0, 4) + \"....\" + wallet.substr(wallet.length - 4, wallet.length)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 53\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n_s(Phantom, \"1gHgcYsEqzBYn0dSgulqGWXJBRs=\");\n_c = Phantom;\nexport default Phantom;\nvar _c;\n$RefreshReg$(_c, \"Phantom\");","map":{"version":3,"names":["React","useState","Connection","PublicKey","Transaction","SystemProgram","clusterApiUrl","jsxDEV","_jsxDEV","Phantom","_s","wallet","setWallet","amount","setAmount","status","setStatus","connected","setConnected","walletBalance","setWalletBalance","network","connection","message","getProvider","window","_window$phantom","provider","phantom","solana","isPhantom","console","log","getBalance","publicKey","handleSignAndSendTransaction","transaction","createTransferTransaction","signature","signAndSendTransaction","err","add","transfer","fromPubkeys","toPubkeys","lamports","Math","pow","connectWallet","resp","connect","toString","handleConnect","then","e","handleDisconnect","disconnect","handleSend","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","event","target","value","type","substring","substr","length","_c","$RefreshReg$"],"sources":["D:/skella/site2/src/components/phantom.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Connection, PublicKey, Transaction, SystemProgram, clusterApiUrl } from \"@solana/web3.js\";\r\nimport './phantom.css';\r\n\r\nexport function Phantom() {\r\n\r\n  const [wallet, setWallet] = useState(null);\r\n  const [amount, setAmount] = useState(0);\r\n  const [status, setStatus] = useState('notConnected');\r\n  const [connected, setConnected] = useState(false);\r\n  const [walletBalance, setWalletBalance] = useState(0);\r\n\r\n  const network = clusterApiUrl('devnet');\r\n  const connection = new Connection(network, 'confirmed');\r\n  const message = 'Please sign and validate your assets';\r\n\r\n\r\n  const getProvider = () => {\r\n    if ('phantom' in window) {\r\n      const provider = window.phantom?.solana;\r\n  \r\n      if (provider?.isPhantom) {\r\n        return provider;\r\n      }\r\n    }\r\n    console.log('Phantom not found');\r\n  };\r\n\r\n  const provider = getProvider();\r\n  \r\n  const getBalance = async () => {\r\n    if(!provider) return;\r\n    setWalletBalance(await connection.getBalance(provider.publicKey));\r\n  }\r\n\r\n  const handleSignAndSendTransaction = async () => {\r\n    if (!provider) return;\r\n    getBalance();\r\n    if(walletBalance < amount) return console.log('Insufficient funds');\r\n    try{\r\n      const transaction = await createTransferTransaction(provider.publicKey, connection);\r\n      const signature = await signAndSendTransaction(provider, transaction);\r\n    }\r\n    catch(err){\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const createTransferTransaction = async (publicKey, connection) => {\r\n    const transaction = new Transaction().add(\r\n      SystemProgram.transfer({\r\n        fromPubkeys : publicKey,\r\n        toPubkeys : publicKey,\r\n        lamports: amount * Math.pow(10, 9),\r\n      })\r\n    )\r\n    return transaction\r\n  }\r\n\r\n  const signAndSendTransaction = async(provider, transaction) => {\r\n\r\n  }\r\n\r\n  const connectWallet = async() => {\r\n    try {\r\n      const resp = await provider.connect();\r\n      setStatus('connected');\r\n      return resp.publicKey.toString();\r\n    } \r\n    catch (err) {\r\n      console.log('User rejected the request.');\r\n    }\r\n  };\r\n\r\n  const handleConnect = async() => {\r\n    try{\r\n      const wallet = await connectWallet()\r\n      .then(setWallet(wallet))\r\n      .then(setConnected(true))\r\n      .then(console.log(`Connected with Public Key: ${wallet}`));\r\n    }\r\n    catch(e) {\r\n      console.log(`Error connecting`);\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  const handleDisconnect = async() => {\r\n    try{\r\n      await provider.disconnect()\r\n      .then(setWallet(null))\r\n      .then(setConnected(false))\r\n      .then(console.log(`Disonnected wallet`));\r\n    }\r\n    catch(e) {\r\n      console.log(`Error Disconnecting`);\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  const handleSend = async() => {\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"phantom\">\r\n\r\n      <h3>Phantom wallet</h3>\r\n\r\n      <div>\r\n        <button className=\"buttons\" onClick={connected? handleDisconnect : handleConnect}>{connected ? \"Disconnect\" : \"Connect\"}</button>   \r\n        <input className=\"buttons\" onChange={(event) => setAmount(event.target.value)} type=\"text\" value={amount} />\r\n        <button className=\"buttons\" onClick={handleSend}>Send</button>   \r\n      </div>\r\n\r\n      {wallet=== null? <p>Wallet not connected</p> :<p>connected to {wallet.substring(0, 4) + \"....\" + wallet.substr(wallet.length-4, wallet.length)}</p>}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Phantom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}